// ----------------------
// <auto-generated>
//     generated using a custom program
// </auto-generated>
// ----------------------

export enum GenderType {
    Unknown,
    Male,
    Female
}

export enum HealthRatingType {
    Unknown,
    PreferredPlus,
    Preferred,
    StandardPlus,
    Standard
}

export enum ProductType {
    Unknown,
    YearTerm5,
    YearTerm10,
    YearTerm15,
    YearTerm20,
    YearTerm25,
    YearTerm30,
    YearTerm35,
    YearTerm40
}

export interface QuoteRequest {
    Campaign: Partial<Campaign> | null;
    CampaignId: number | null;
    CreatedDate: string | null;
    EloquaCampaign: string | null;
    HasBeenFulfilled: boolean;
    LeadType: string | null;
    ReferringUrl: string | null;
    SelectedQuoteId: number | null;
    User: Partial<User> | null;
    UserId: number;
    VelocifyCampaignId: number;
}

export enum TobaccoType {
    Unknown,
    Yes,
    No
}

export enum PhoneNumberType {
    Home,
    Business,
    Mobile
}

export interface IAddress {
    City: string | null;
    County: string | null;
    State: string | null;
    Street1: string | null;
    Street2: string | null;
    Zip: string | null;
}

export interface ChangeStatus extends MsgStatus {
    ActionCode: string | null;
    ChangeDescription: string | null;
}

export interface Coverage {
    CoverageCode: string | null;
    CurrentRetroactiveDate: string | null;
    CurrentTermAmount: Partial<number> | null;
    Deductible: number | null;
    HartfordQuoteResponse: Partial<HartfordQuoteResponse> | null;
    HartfordQuoteResponseId: number;
    Id: number;
    Limit: number | null;
    Name: string | null;
    OptionTypeCode: string | null;
    OptionValue: string | null;
    SubjectInsuranceCode: string | null;
    ValuationCode: string | null;
}

export interface CoverageDescription {
    CoverageCode: string | null;
    Description: string | null;
    Id: number;
}

export interface ExtendedStatus extends MsgStatus {
    ExtendedStatusCode: string | null;
    ExtendedStatusDescription: string | null;
}

export interface HartfordCustomer {
    Id: number;
    OtherIdentifiers: Array<Partial<OtherIdentifier>> | null;
    User: Partial<User> | null;
    UserId: number;
}

export interface HartfordQuestionGroup {
    HartfordQuestionGroupId: number;
    Id: number;
    QuestionGroup: Partial<QuestionGroup> | null;
    SpectrumClasses: Array<Partial<HartfordQuestionGroupToSpectrumClass>> | null;
}

export interface HartfordQuestionAnswer {
    AnswerQuestionCode: string | null;
    Id: number;
    QuestionInputValue: Partial<QuestionInputValue> | null;
}

export interface HartFordQuestion {
    Id: number;
    Question: Partial<Question> | null;
    QuestionCode: string | null;
}

export interface HartfordQuestionGroupToSpectrumClass {
    HartfordQuestionGroup: Partial<HartfordQuestionGroup> | null;
    HartfordQuestionGroupId: number;
    Id: number;
    SpectrumClass: Partial<SpectrumClass> | null;
    SpectrumClassId: number;
}

export interface HartfordQuestionValidator {
    HartfordValidatorId: string | null;
    Id: number;
    ResponseValidator: Partial<ResponseValidator> | null;
}

export interface HartfordQuoteResponse {
    CompaniesQuoteNumber: string | null;
    Coverages: Array<Partial<Coverage>> | null;
    CreatedDate: string;
    EffectiveDate: string;
    ExpirationDate: string;
    FullTermAmt: Partial<number>;
    Id: number;
    MessageErrorCode: string | null;
    MessageStatusCode: string | null;
    MessageStatusDescription: string | null;
    MsgStatuses: Array<Partial<MsgStatus>> | null;
    OriginalPolicyNumber: string | null;
    PaymentOptions: Array<Partial<PaymentOption>> | null;
    PolicyNumber: string | null;
    QuestionnaireResult: Partial<QuestionnaireResult> | null;
    QuestionnaireResultId: number;
    QuoteInfoDescription: string | null;
    QuoteInfoInitialQuoteRequestDt: string | null;
    QuoteInfoInsurerId: string | null;
}

export interface HartfordQuoteXmlRequest {
    Bridged: boolean;
    CreatedDate: string;
    Id: number;
    QuestionnaireResult: Partial<QuestionnaireResult> | null;
    QuestionnaireResultId: number;
    XmlRequest: string | null;
    XmlResponse: string | null;
}

export interface Installment {
    Id: number;
    InstallmentAmount: Partial<number>;
    InstallmentDueDate: string;
    PaymentOption: Partial<PaymentOption> | null;
    PaymentOptionId: number;
}

export interface MsgStatus {
    HartfordQuoteResponse: Partial<HartfordQuoteResponse> | null;
    HartfordQuoteResponseId: number;
    Id: number;
}

export interface OccupancyCode {
    BuildingAge: BuildingAge;
    BuildingOccupancyCode: string | null;
    ClassCode: string | null;
    Id: number;
    NumberOfStories: NumberOfStories;
    OccupancyQuestionInputValueId: number;
    OccupancyTypeCode: string | null;
    OccupancyTypeQuestionInputValueId: number;
    SortOrder: number;
}

export enum NumberOfStories {
    None,
    OneToFour,
    GreaterThanFour,
    FiveToTwelve,
    GreaterThanTwelve
}

export enum BuildingAge {
    None,
    LessThanThirty,
    EqualOrGreaterThanThirty
}

export interface OtherIdentifier {
    HartfordCustomer: Partial<HartfordCustomer> | null;
    HartfordCustomerId: number;
    Id: number;
    OtherId: string | null;
    OtherTypeCode: string | null;
}

export interface PaymentOption {
    DayMonthDue: number;
    HartfordQuoteResponse: Partial<HartfordQuoteResponse> | null;
    HartfordQuoteResponseId: number;
    Id: number;
    InstallmentFeeAmount: Partial<number>;
    Installments: Array<Partial<Installment>> | null;
    PaymentPlanCode: number;
}

export interface SpectrumClass {
    ClassCode: number;
    Description: string | null;
    ExposureBaseCode: string | null;
    ExposureBaseName: string | null;
    HartfordQuestionGroups: Array<Partial<HartfordQuestionGroupToSpectrumClass>> | null;
    Id: number;
    IndustryName: string | null;
    MarketGroupCode: string | null;
    MarketGroupName: string | null;
    SpectrumProgramName: string | null;
    SpecturmProgramCode: string | null;
}

export interface DocumentPath {
    Id: number;
    Path: string | null;
    PathType: PathType;
    Question: Partial<Question> | null;
    QuestionId: number | null;
    QuestionInputValue: Partial<QuestionInputValue> | null;
    QuestionInputValueId: number | null;
}

export enum PathType {
    Xpath,
    Javascript
}

export enum QuestionnaireResultStatus {
    GettingStarted,
    GeneralInformation,
    BusinessClass,
    Location,
    CoverageAmount,
    AdditionalInformation,
    Error,
    Quotes,
    SelectedQuote
}

export enum QuestionGroupCovType {
    LiabilityOnly,
    OCP,
    PropertyOnly,
    PropertyandLiability
}

export enum QuestionGroupDriverType {
    Class,
    LOB,
    OptionalCvg
}

export enum QuestionUiType {
    CheckBox,
    Radio,
    Text,
    TextArea,
    SingleSelect,
    MultiSelect
}

export interface ResponseValidatorActionToQuestionInputValue {
    Id: number;
    QuestionInputValue: Partial<QuestionInputValue> | null;
    QuestionInputValueId: number;
    ResponseValidatorAction: Partial<ResponseValidatorAction> | null;
    ResponseValidatorActionId: number;
}

export interface CollectionQuestion extends Question {
    MaxInstance: number;
    Questions: Array<Partial<Question>> | null;
}

export enum PredicateType {
    XpathExpression,
    Regex,
    Numeric,
    NonNegative,
    Integer
}

export interface Question {
    Answers: Array<Partial<Answer>> | null;
    DocumentPaths: Array<Partial<DocumentPath>> | null;
    EndDate: string | null;
    FriendlyHelperText: string | null;
    FriendlyQuestionText: string | null;
    HartFordQuestion: Partial<HartFordQuestion> | null;
    HelperText: string | null;
    Hidden: boolean;
    Id: number;
    IsExpired: boolean;
    IsRequired: boolean;
    MaxLength: number;
    ParentCollectionQuestion: Partial<CollectionQuestion> | null;
    ParentCollectionQuestionId: number | null;
    QuestionFlowAugmentorActions: Array<Partial<QuestionFlowAugmentorAction>> | null;
    QuestionGroup: Partial<QuestionGroup> | null;
    QuestionGroupId: number;
    QuestionText: string | null;
    ResponseValidators: Array<Partial<ResponseValidator>> | null;
    Sequence: Partial<number>;
    SourceIdentifier: string | null;
    StartDate: string;
}

export interface FlowAugmentor {
    Actions: Array<Partial<FlowAugmentorAction>> | null;
    EndDate: string | null;
    Id: number;
    IsExpired: boolean;
    Predicate: string | null;
    PredicateType: PredicateType;
    Question: Partial<StandardQuestion> | null;
    QuestionId: number;
    StartDate: string;
}

export interface QuestionGroup {
    EndDate: string | null;
    FriendlyName: string | null;
    HartfordQuestionGroup: Partial<HartfordQuestionGroup> | null;
    Id: number;
    IsExpired: boolean;
    IsRequired: boolean;
    Name: string | null;
    QuestionFlowAugmentorActions: Array<Partial<QuestionFlowAugmentorAction>> | null;
    QuestionGroupCovType: QuestionGroupCovType;
    QuestionGroupDriverType: QuestionGroupDriverType;
    QuestionGroupFlowAugmentorActions: Array<Partial<QuestionGroupFlowAugmentorAction>> | null;
    QuestionGroupType: QuestionGroupType;
    QuestionnaireGroup: Partial<QuestionnaireGroup> | null;
    QuestionnaireGroupId: number | null;
    Questions: Array<Partial<Question>> | null;
    SourceIdentifier: string | null;
    StartDate: string;
}

export enum QuestionGroupType {
    HartfordEligibility,
    HartfordLocation,
    HartfordPolicy,
    HartfordAccord
}

export enum QuestionInputType {
    String,
    Date,
    Integer,
    Boolean,
    Decimal
}

export interface QuestionInputValue {
    Answer: string | null;
    DisplayAnswer: string | null;
    DocumentPaths: Array<Partial<DocumentPath>> | null;
    EndDate: string | null;
    FriendlyDisplayAnswer: string | null;
    FriendlyHelpText: string | null;
    HartfordQuestionAnswer: Partial<HartfordQuestionAnswer> | null;
    HelpText: string | null;
    Id: number;
    IsExpired: boolean;
    Question: Partial<StandardQuestion> | null;
    QuestionId: number;
    ResponseValidatorActionToQuestionInputValues: Array<Partial<ResponseValidatorActionToQuestionInputValue>> | null;
    Sequence: Partial<number>;
    StartDate: string;
}

export interface Questionnaire {
    Id: number;
    Name: string | null;
    QuestionnaireGroups: Array<Partial<QuestionnaireGroup>> | null;
    QuestionnaireResults: Array<Partial<QuestionnaireResult>> | null;
    SourceIdentifier: string | null;
}

export interface QuestionnaireGroup {
    FriendlyName: string | null;
    Id: number;
    Name: string | null;
    QuestionGroupFlowAugmentorActions: Array<Partial<QuestionGroupFlowAugmentorAction>> | null;
    QuestionGroups: Array<Partial<QuestionGroup>> | null;
    Questionnaire: Partial<Questionnaire> | null;
    QuestionnaireId: number;
    Sequence: Partial<number>;
    SourceIdentifier: string | null;
}

export interface ResponseValidator {
    Actions: Array<Partial<ResponseValidatorAction>> | null;
    EndDate: string | null;
    HartfordQuestionValidator: Partial<HartfordQuestionValidator> | null;
    Id: number;
    IsExpired: boolean;
    Predicate: string | null;
    PredicateType: PredicateType;
    Question: Partial<Question> | null;
    QuestionId: number;
    StartDate: string;
}

export interface StandardQuestion extends Question {
    DefaultAnswerValue: string | null;
    FlowAugmentors: Array<Partial<FlowAugmentor>> | null;
    QuestionInputType: QuestionInputType;
    QuestionInputValues: Array<Partial<QuestionInputValue>> | null;
    QuestionUiType: QuestionUiType;
}

export interface QuestionnaireResult {
    Answers: Array<Partial<Answer>> | null;
    Campaign: string | null;
    CampaignId: number | null;
    CreatedDate: string | null;
    HartfordQuoteResponses: Array<Partial<HartfordQuoteResponse>> | null;
    HartfordQuoteXmlRequests: Array<Partial<HartfordQuoteXmlRequest>> | null;
    HasBeenFulfilled: boolean;
    Id: number;
    LeadType: string | null;
    Questionnaire: Partial<Questionnaire> | null;
    QuestionnaireId: number;
    ReferringUrl: string | null;
    Status: QuestionnaireResultStatus;
    User: Partial<User> | null;
    UserId: number;
}

export enum ResponseValidatorActionType {
    HardStop,
    Alert,
    Validation,
    SelectFilter
}

export interface ResponseValidatorAction {
    EndDate: string | null;
    FriendlyMessage: string | null;
    Id: number;
    IsExpired: boolean;
    Message: string | null;
    ResponseValidator: Partial<ResponseValidator> | null;
    ResponseValidatorActionToQuestionInputValues: Array<Partial<ResponseValidatorActionToQuestionInputValue>> | null;
    ResponseValidatorId: number;
    StartDate: string;
    Type: ResponseValidatorActionType;
}

export interface AddAnswerFlowAugmentorAction extends FlowAugmentorAction {
    AnswerPath: string | null;
    AnswerValue: string | null;
}

export interface QuestionGroupFlowAugmentorAction extends FlowAugmentorAction {
    QuestionGroup: Partial<QuestionGroup> | null;
    QuestionGroupId: number;
    QuestionnaireGroup: Partial<QuestionnaireGroup> | null;
    QuestionnaireGroupId: number;
}

export enum FlowAugmentorActionType {
    Add,
    AddAnswer,
    Remove,
    Show
}

export enum FlowAugmentorActionPlacement {
    Next,
    Last,
    AtIndex
}

export interface FlowAugmentorAction {
    EndDate: string | null;
    FlowAugmentor: Partial<FlowAugmentor> | null;
    FlowAugmentorId: number;
    Id: number;
    Index: number | null;
    IsExpired: boolean;
    Placement: FlowAugmentorActionPlacement;
    StartDate: string;
    Type: FlowAugmentorActionType;
}

export interface QuestionFlowAugmentorAction extends FlowAugmentorAction {
    Question: Partial<Question> | null;
    QuestionGroup: Partial<QuestionGroup> | null;
    QuestionGroupId: number;
    QuestionId: number;
}

export interface BopAnswer extends Answer {
    LocationGuid: string | null;
    SourceIdentifier: string | null;
    Value: string | null;
    XPath: string | null;
}

export interface Answer {
    CreatedDate: string;
    Id: number;
    QuestionnaireResult: Partial<QuestionnaireResult> | null;
    QuestionnaireResultId: number;
    QuestionText: string | null;
}

export enum LifeQuoteRequestStatus {
    GettingStarted,
    AboutYou,
    MillionDollarQuote,
    Uninsurable,
    Error,
    Quotes,
    SelectedQuote
}

export interface LifeQuoteRequest extends QuoteRequest {
    AllowTextMessaging: boolean;
    City: string | null;
    CoverageAmount: Partial<number>;
    ErrorMessage: string | null;
    Gender: GenderType;
    HasFulfillBeenRequested: boolean;
    HealthRating: HealthRatingType;
    Id: number;
    IsLargeQuoteRequest: boolean;
    LifeQuotes: Array<Partial<LifeQuote>> | null;
    PartnerId: string | null;
    ProductType: ProductType;
    RequestPayload: string | null;
    ResponsePayload: string | null;
    State: string | null;
    Status: LifeQuoteRequestStatus;
    Street1: string | null;
    Tobacco: TobaccoType;
    WasLargeQuoteEmailSent: boolean;
    ZipCode: string | null;
}

export interface LifeQuote {
    AnnualPremium: Partial<number>;
    Company: string | null;
    CompanyCode: string | null;
    CreatedDate: string;
    HealthCategory: string | null;
    Id: number;
    LifeQuoteRequest: Partial<LifeQuoteRequest> | null;
    LifeQuoteRequestId: number;
    LogoUrl: string | null;
    PolicyFee: Partial<number>;
    Premium: Partial<number>;
    Product: string | null;
    ProductCode: string | null;
}

export enum AutoQuoteRequestStatus {
    GettingStarted,
    Policy,
    Vehicles,
    Drivers,
    Discounts,
    Error,
    Quotes,
    SelectedQuote
}

export enum CurrentPriorInsuranceType {
    Standard,
    None
}

export interface DriverToVehicle {
    Driver: Partial<Driver> | null;
    DriverId: number;
    Id: number;
    Vehicle: Partial<Vehicle> | null;
    VehicleId: number;
}

export interface Accident {
    AmountOverSpeedLimit: number | null;
    BloodAlcoholLevel: number | null;
    DamageAmount: number | null;
    Date: string;
    Driver: Partial<Driver> | null;
    DriverId: number;
    Id: number;
    InjuryAmount: number | null;
    Type: AccidentType | null;
    VertaforeType: VertaforeAccidentTypes | null;
}

export enum EducationLevelType {
    NoHighSchoolDiplomaOrGed,
    HighSchoolDiplomaOrGed,
    VocationalTradeSchoolMilitary,
    CompletedSomeCollege,
    CurrentlyInCollege,
    CollegeDegree,
    GraduateWorkOrGraduateDegree
}

export enum VertaforeAccidentTypes {
    Speeding,
    DWI,
    StopSign,
    NotAtFaultAccident,
    OtherMinorViolation,
    OtherMajorViolation,
    NotAtFaultOther,
    AllOtherMinorInfractions,
    FailuretoStop
}

export enum AccidentType {
    vcConsumingAlcohol,
    vcFirstViolCode,
    vcDrvBusWhileIntox,
    MaxLienHolders,
    vcDUI,
    vcDWAI,
    vcDWI,
    vcEdProgRequired,
    vcIllegalTransport,
    vcImpliedConsent,
    vcOpenContainer,
    vcOperWhileIntox,
    vcLiquorViol,
    vcPedAcc,
    vcAccAtFault,
    vcHomocide,
    vcManslaughter,
    vcDUID,
    vcPossessionofSubst,
    vcHeadlightViol,
    vcMotorcycleEquipViol,
    vcDefectiveEquip,
    vcOverheight,
    vcOverlength,
    vcChangedLanesUnsafe,
    vcCrossingCenterMed,
    vcCrossingDividedHwy,
    vcCrossingYellowLine,
    vcDisregardNoPassZone,
    vcDrvOnLeftSide,
    vcDrvOnShoulder,
    vcDrvOnSidewalk,
    vcFailKeepRight,
    vcIllegalPass,
    vcImproperMerging,
    vcImproperPass,
    vcPassSchoolBus,
    vcImproperLaneUse,
    vcOperWhereProhib,
    vcAllowUnlicensed,
    vcAlteredDL,
    vcDisplayAnothersDL,
    vcLicSuspended,
    vcExpired,
    vcNoLicense,
    vcDuplicateDL,
    vcFailDisplayDL,
    vcFalseLicense,
    vcLoanedDL,
    vcNoChaufferLicense,
    vcNoDL,
    vcNoMotorcycleQualif,
    vcObtainByMisrep,
    vcOperDuringSusp,
    vcOperateOutOfClass,
    vcChargeableSuspension,
    vcViolateDLRestrict,
    vcPermitViol,
    vcNoLights,
    vcFailDimHeadLights,
    vcAccNotAtFault,
    vcDisobeyPolice,
    vcEludPolice,
    vcAvoidTrafficControl,
    vcFailToGiveSignal,
    vcFailToStopForTrain,
    vcFailObeyRailRoad,
    vcRunRedLight,
    vcRunStopSign,
    vcFailYieldPedestrian,
    vcFailRightOfWay,
    vcFailEmergencyVeh,
    vcImproperSignal,
    vcTooFast,
    vcTooSlowForConditions,
    vcDrvUnderMinimum,
    vcExcessAcceleration,
    vcFailControlSpeed,
    vcRacing,
    vcSpeeding,
    vcSpeedSchoolZone,
    vcUnsafeSpeed,
    vcImproperStart,
    vcSquealingTires,
    vcUnsafeStart,
    vcImproperTowing,
    vcTurnedAcrossDivided,
    vcTurnedWhenUnsafe,
    vcDriveLeftOfCenter,
    vcWrongSideOfRoad,
    vcWrongWayOnOneway,
    vcWrongWayIsland,
    vcWrongWayOnRoadway,
    vcAssaultWAuto,
    vcMiscMovingViol,
    vcMiscNonMovingViol,
    vcAlteredVIN,
    vcImproperBacking,
    vcCarPoolViol,
    vcCarelessDriving,
    vcChangeDriverMoving,
    vcCoasting,
    vcConvictionInsFraud,
    vcCriminalNegligence,
    vcDisregardSafety,
    vcDriversViewObstruct,
    vcDriveOnFireHose,
    vcDrvInSafetyZone,
    vcDrivingWOConsent,
    vcFailControlVehicle,
    vcFailToExchangeInfo,
    vcNoPayToll,
    vcFailToWearBelt,
    vcFailureOfDuty,
    vcFailSoundHorn,
    vcFelony,
    vcFollowingImproper,
    vcFollowingTooClose,
    vcImpedingTraffic,
    vcImproperDriving,
    vcBadTurnpikeStyle,
    vcIncreaseWhilePassed,
    vcUnattendedCar,
    vcLeavingScene,
    vcMVIViolation,
    vcNegligentCollision,
    vcNegligentDriving,
    vcNoLiabInsurance,
    vcParkingOnRoadway,
    vcProhibUTurn,
    vcProtectiveHeadGear,
    vcReckless,
    vcStealingAuto,
    vcUnrestrainedChild,
    vcUnsafeOperator,
    vcEmissionsViol,
    vcVehiclularInjury,
    vcViolSafetyZone,
    vcViolatePromiseAppear,
    vcCompClaim,
    vcAllowUnlawfulOperation,
    vcUMClaim,
    vcUIMClaim,
    MaxViolations,
    vcLastViolCode,
    vcMedPayClaim,
    vcCAFirstViolCode,
    vcAccidentWithPedestrian,
    vcAccidentAtFaultNoInjury,
    vcAccidentAtFaultInjury,
    vcFailureToReportAccident,
    vcAccidentNotAtFault,
    vcAggravatedAssaultWithAuto,
    vcAllOtherMovingViolations,
    vcAllOtherNonMovingViolations,
    vcAllowUnlawfulOperationOfVehicle,
    vcAllowUnlicensedDriver,
    vcAlteredForgedVIN,
    vcFailureToObeyTrafficDevice,
    vcUnsafeStartingBacking,
    vcDiamondLane,
    vcDiamondLaneCrossDoubleLine,
    vcCACarelessDriving,
    vcUnsafeLaneChange,
    vcChangingDriverMovingVehicle,
    vcCoastingGearsDisengaged,
    vcComprehensiveClaim,
    vcConsumingAlcoholWhileDriving,
    vcConvictionOfInsuranceFraud,
    vcCACriminalNegligence,
    vcCrossingCenterMedian,
    vcCrossingDividedHighway,
    vcCACrossingYellowLine,
    vcDisobeyPoliceOfficer,
    vcDisobeyTollHighwayOfficer,
    vcDisplayAlteredCounterfeitLicense,
    vcDisplayOtherPersonsLicense,
    vcDisregardNoPassingZone,
    vcDisregardOfSafety,
    vcDrivingLeftOfCenter,
    vcDriversViewObstructed,
    vcDrivingAtNightWithoutLights,
    vcDrivingOnLeftSideOfRoadway,
    vcDrivingOnShoulder,
    vcDrivingOnSidewalk,
    vcDrivingWrongSideOfRoad,
    vcDrivingOverFireHose,
    vcDrivingSchoolBusWhileIntoxicated,
    vcDrivingThroughSafetyZone,
    vcDrivingTooFastForConditions,
    vcDrivingTooSlowForConditions,
    vcDrivingWithoutOwnersConsent,
    vcDrivingWhileSuspendedRevoked,
    vcDrivingWithExpiredLicense,
    vcDrivingWithoutLicensePermit,
    vcDrivingWrongWayOneWay,
    vcDrivingWrongSideDividedHighway,
    vcDrivingUnderMinimum,
    vcDUIAlcoholDrugsNoInjury,
    vcDUIAlcoholDrugsInjuryOrDeath,
    vcMinorWithBACOverZeroFive,
    vcMinorWithBACOverZeroOne,
    vcDuplicateDriversLicense,
    vcEducationProgramRequired,
    vcEvadingPeaceOfficer,
    vcEvadingPeaceOfficerReckless,
    vcEvadingPeaceOfficerInjury,
    vcExcessiveAcceleration,
    vcFailToControlSpeed,
    vcFailToControlVehicle,
    vcFailToDisplayDriversLicense,
    vcFailToExchangeInformation,
    vcImproperTurnNoSignal,
    vcVehicleXingEvadingToll,
    vcFailToStopApproachingTrain,
    vcStopRequiredRailroadCrossing,
    vcFailToStopRedLight,
    vcFailToStopStopSign,
    vcFailToWearSeatBelt,
    vcYieldingRightOfWayPedestrian,
    vcFailureToYieldRightOfWay,
    vcFailureToYieldEmergencyVehicle,
    vcFailureOfDutyInjuryOrDeath,
    vcFailureToDimLights,
    vcFailureToKeepRight,
    vcFailureToSoundHorn,
    vcFalseEvidenceOfRegistration,
    vcFelonyInvolvingMotorVehicle,
    vcFollowingImproperly,
    vcFollowingTooClosely,
    vcDistanceBetweenVehicles,
    vcGivingImproperSignal,
    vcHomicideWithMotorVehicle,
    vcPassingOnRightOrShoulder,
    vcIllegalTransportationOfAlcohol,
    vcImpedingTrafficMovement,
    vcRefusalToSubmitToTest,
    vcCAImproperDriving,
    vcFreewayRampEnteringExiting,
    vcImproperMergingIntoTraffic,
    vcIllegalImproperUnsafePassing,
    vcStopForSchoolBus,
    vcCAImproperStart,
    vcImproperTowingRiding,
    vcCAImproperLaneUse,
    vcIncreaseSpeedWhileBeingPassed,
    vcLeaveEngineRunning,
    vcHitAndRunInjury,
    vcHitAndRunNoInjury,
    vcLightViolations,
    vcLoanLicenseToOther,
    vcClaimMedicalPayments,
    vcMotorVehicleInspection,
    vcMotorcyclePassengersEquipment,
    vcCANegligentCollision,
    vcCANegligentDriving,
    vcNoChauffeursLicense,
    vcNoDriversLicense,
    vcNoLiabilityInsurance,
    vcNoMotorcycleQualification,
    vcObtainLicenseByMisrepresentation,
    vcOpenContainerDriving,
    vcOpenContainerPossession,
    vcOperatingDuringLifeSuspension,
    vcOperatingOutOfClassification,
    vcOperatingWhereProhibited,
    vcUnsafeUnlawfullyEquippedVehicle,
    vcOverheightVehicle,
    vcOverlengthVehicle,
    vcCAParkingOnRoadway,
    vcPossessionControlledSubstance,
    vcIllegalTurnUTurn,
    vcIllegalTurnUTurnAtIntersection,
    vcCAProtectiveHeadGear,
    vcSpeedContestExhibitionOfSpeed,
    vcSpeedContestAidingAndAbetting,
    vcRecklessDrivingNoInjury,
    vcRecklessDrivingInjury,
    vcSpeeding65AndUnder,
    vcSpeedingOver65,
    vcSpeedingOver100,
    vcSpeedingTruckTractor,
    vcSpeedingConstructionZone,
    vcSpeedingWhileTowing,
    vcCommercialSpeedVehicle,
    vcSpeedingInSchoolZone,
    vcSquealingScreechingTires,
    vcCAStealingAuto,
    vcSuspensionChargeable,
    vcTurnAcrossDividedSection,
    vcUnsafeTurn,
    vcClaimUIM,
    vcClaimUM,
    vcChildPassengerRestraint,
    vcCAUnsafeOperator,
    vcRestrictedSpeedWeatherConditions,
    vcUnsafeStartParkStopStanding,
    vcVehicleEmissionsSuspension,
    vcVehicularInjury,
    vcVehicularManslaughterGrossNegligence,
    vcVehicularManslaughterNoGrossNegligence,
    vcViolationOfLicenseRestrictions,
    vcDrivingHoursEquipmentMaintenanceOperation,
    vcPermitDriverOutOfClassification,
    vcDrinkingInVehicle,
    vcPossessionOfAlcohol,
    vcViolationOfPromiseToAppear,
    vcWrongDirectionAroundTrafficIsland,
    vcWrongDirectionDividedStreet,
    vcClaimLiability,
    vcClaimCollision,
    vcClaimTowing,
    vcViolationOfSuspensionDUI,
    vcViolationOfRestrictionDUI,
    vcFalseStatement,
    vcFinancialResponsibility,
    vcBrakes,
    vcLicensePlate,
    vcExhaustModified,
    vcExplosivesTransportation,
    vcInterfereWithTrafficDevice,
    vcInterfereWithTrafficDeviceInjury,
    vcMaliciousMischiefTampering,
    vcMaliciousActsBodilyHarm,
    vcMaliciousActsRemoveMarker,
    vcThrowingSubstance,
    vcThrowingSubstanceInjury,
    vcThrowingLightedSubstance,
    vcThrowingMatterOnHighway,
    vcDisobeyConstructionSigns,
    vcPassingAnimals,
    vcPassCarStoppedForPedestrian,
    vcMaximumDesignatedSpeedVehicle,
    vcStopAtInoperativeSignal,
    vcTurnProhibitedBySign,
    vcTurnOnRedLight,
    vcUseOfTwoWayLeftTurnLane,
    vcTurnAcrossBicycleLane,
    vcYieldOnLeftTurn,
    vcYieldRightOfWayToBlindPedestrian,
    vcYieldWhenOvertaken,
    vcTranportingPersonInTruckLoadSpace,
    vcUnsafeOverweightLoad,
    vcUnsafeLoadNoPermit,
    vcEnterIntersectionWithoutSpace,
    vcTurnAtIntersectionWithoutSpace,
    vcAlteredLicensePlates,
    vcDoubleLinesOneBrokenLine,
    vcDrivingWithParkingLights,
    vcEnteringHighwayFromServiceRoad,
    vcOnRampExit,
    vcOpenDoor,
    vcRightOfOncomingVehicle,
    vcThreeLaneHighway,
    vcViolatingPromiseToCorrect,
    vcUsingWirelessPhone,
    vcUsingWirelessPhoneUnder18,
    vcTexting,
    vcTurnLaneUse,
    vcYieldToVehicleInIntersection,
    vcFailureToStop,
    vcDUIDrugsNoInjury,
    vcFailToYieldEnteringHighway,
    vcInsufficientSpaceAtRRCrossing,
    vcCommercialSpeed,
    vcDrivingUnregistered,
    vcLighting,
    vcOtherEquipment,
    vcTransportingExplosives,
    vcPassingSubjectToSection,
    vcOtherYield,
    vcSpillingLoad,
    vcCommercialChargeable,
    vcCommercialChargeableMoving,
    vcCommercialNonChargeable,
    vcCommercialNonChargeableMoving,
    vcDrivingOnLevee,
    vcProhibitedBikePath,
    vcCoastingProhibited,
    vcRidingInTrailer,
    vcOperatingGolfCartOnHighway,
    vcCALastViolCode,
    CAMaxViolations,
    AllOtherNonStandardCompID,
    AllOtherStandardCompID,
    AllOtherNonVoluntaryCompID
}

export interface ClientDetail extends IAddress {
    AutoQuoteRequest: Partial<AutoQuoteRequest> | null;
    Id: number;
    IsHomeOwned: boolean | null;
    IsTextMessagingAllowed: boolean;
}

export interface IVehicle {
    Make: string | null;
    Model: string | null;
    ModelYear: number;
    VIN: string | null;
}

export interface Driver {
    Accidents: Array<Partial<Accident>> | null;
    AutoQuoteRequest: Partial<AutoQuoteRequest> | null;
    AutoQuoteRequestId: number;
    DateOfBirth: string;
    DriverToVehicles: Array<Partial<DriverToVehicle>> | null;
    FirstLicensedDate: string | null;
    FirstName: string | null;
    Gender: string | null;
    HasLicense: boolean | null;
    Id: number;
    IsLicenseCurrent: boolean | null;
    LastName: string | null;
    LicenseStatus: string | null;
    MaritalStatus: string | null;
    RelationshipToInsured: string | null;
    StateLicense: string | null;
}

export interface VertaforeAutoLookup {
    AirBagRear: boolean;
    Alarm: boolean;
    AntilockBrakes: boolean;
    AntilockBrakes4Wheels: boolean;
    AntiTheftDevice: boolean;
    AutomaticSeatbelts: boolean;
    BodyType: string | null;
    CostNewCollSym: string | null;
    CostNewCompSym: string | null;
    CountryWidePerformance: string | null;
    Cylinders: number;
    DaytimeRunningLights: boolean;
    EngineDisplacementCubicInches: number;
    EngineSize: string | null;
    EngineType: string | null;
    FourWheelDrive: string | null;
    FullModelName: string | null;
    GVWWildCard: number;
    ISOCollSym: string | null;
    ISOCompSym: string | null;
    ISOLiabilitySymbol: string | null;
    ISOMedicalSymbol: string | null;
    ISOPerformanceCd: string | null;
    IsoSymbol: string | null;
    Key: string | null;
    ModelYear: string | null;
    NumericSymbol: string | null;
    PassiveAntiTheftDevice: boolean;
    PassiveRestraintDriver: boolean;
    PassiveRestraintPassenger: boolean;
    Performance: string | null;
    PLRMake: string | null;
    PriceNewSym: string | null;
    SideAirBags: boolean;
    VehEngine: string | null;
    VehId: string | null;
    VehMake: string | null;
    VehModel: string | null;
    VehSymbol: string | null;
    VehType: string | null;
    VehVIN: string | null;
    VINMasterVINPrefix: string | null;
    VINPrefix: string | null;
}

export interface PreviousPolicy {
    AutoQuoteRequest: Partial<AutoQuoteRequest> | null;
    CurrentPriorInsurance: CurrentPriorInsuranceType | null;
    DoesHouseholdConsumeAlcohol: boolean | null;
    EducationLevel: EducationLevelType;
    EffectiveDate: string | null;
    EnrollTelematicsProgram: boolean | null;
    Id: number;
    InjuryCoverageLimit: number;
    LiabilityCoverageLimit: number;
    MonthsInsured: number | null;
    PaperLess: boolean | null;
    PleaseAdviseMe: boolean | null;
    PolicyExpirationDate: string | null;
    PropertyDamageCoverageLimit: number | null;
    WasInsuredLast30Days: boolean;
}

export interface AutoQuote {
    AutoQuoteRequest: Partial<AutoQuoteRequest> | null;
    AutoQuoteRequestId: number;
    CarrierCompanyName: string | null;
    CompanyUnitId: number;
    CreatedDate: string;
    Error: string | null;
    FatalError: string | null;
    Id: number;
    LogoUrl: string | null;
    PayPlanDownPayment: number;
    PayPlanNumOfPayments: number;
    PayPlanPaymentAmount: number;
    PhoneCode: string | null;
    Premium: number;
    Term: number;
    Vehicles: Array<Partial<QuotedVehicle>> | null;
}

export interface QuotedVehicle extends IVehicle {
    AutoQuote: Partial<AutoQuote> | null;
    AutoQuoteId: number;
    CollisionDeductible: number | null;
    CollisionLimit: number | null;
    CollisionPremium: number | null;
    ComprehensiveDeductible: number | null;
    ComprehensiveLimit: number | null;
    ComprehensivePremium: number | null;
    Id: number;
    InjuryLimit: number | null;
    LiabilityBodilyInjuryDeductible: number | null;
    LiabilityBodilyInjuryPremium: number | null;
    LiabilityLimit: number | null;
    MedicalPaymentsDeductible: number | null;
    MedicalPaymentsLimit: number | null;
    MedicalPaymentsPremium: number | null;
    PersonalInjuryProtectionDeductible: number | null;
    PersonalInjuryProtectionLimit: number | null;
    PersonalInjuryProtectionPremium: number | null;
    PropertyDamageDeductible: number | null;
    PropertyDamageLimit: number | null;
    PropertyDamagePremium: number | null;
    RentalDeductible: number | null;
    RentalLimit: number | null;
    RentalPremium: number | null;
    TowingDeductible: number | null;
    TowingLimit: number | null;
    TowingPremium: number | null;
    UninsuredMotoristBodilyInjuryDeductible: number | null;
    UninsuredMotoristBodilyInjuryLimit: number | null;
    UninsuredMotoristBodilyInjuryPremium: number | null;
}

export interface AutoQuoteRequest extends QuoteRequest {
    AutoQuotes: Array<Partial<AutoQuote>> | null;
    CarrierErrors: Array<Partial<CarrierError>> | null;
    ClientDetail: Partial<ClientDetail> | null;
    Drivers: Array<Partial<Driver>> | null;
    HasFulfillBeenRequested: boolean;
    Id: number;
    IsVertafore: boolean | null;
    PlRaterExportQuoteUrl: string | null;
    PreviousPolicy: Partial<PreviousPolicy> | null;
    QuoteNotificationId: number;
    QuotingErrors: string | null;
    RequestedPolicyStartDate: string | null;
    RequestPayload: string | null;
    ResponsePayload: string | null;
    Status: AutoQuoteRequestStatus;
    TransactionId: string | null;
    Vehicles: Array<Partial<Vehicle>> | null;
}

export interface Vehicle extends IVehicle {
    AnnualMilesDriven: number;
    AutoQuoteRequest: Partial<AutoQuoteRequest> | null;
    AutoQuoteRequestId: number;
    CollisionDeductible: number | null;
    ComprehensiveDeductible: number | null;
    DriverToVehicles: Array<Partial<DriverToVehicle>> | null;
    Id: number;
    MSRP: number | null;
    PrimaryDriverId: number | null;
    RentalCarReimbursementLimit: number | null;
    Sequence: number;
    TowingCoverageLimit: number | null;
    TransportationExpense: string | null;
    VehicleUsage: string | null;
}

export interface Campaign {
    AutoQuoteRequests: Array<Partial<AutoQuoteRequest>> | null;
    CampaignId: number;
    CarrierLogins: Array<Partial<CarrierLogin>> | null;
    Id: number;
    LifeQuoteRequests: Array<Partial<LifeQuoteRequest>> | null;
    Name: string | null;
    PersonalPropertyQuoteRequests: Array<Partial<PersonalPropertyQuoteRequest>> | null;
}

export interface CampaignImageAttachment extends Attachment {
    Campaigns: Array<Partial<Campaign>> | null;
    FolderName: string | null;
}

export interface CarrierError {
    AutoQuoteRequest: Partial<AutoQuoteRequest> | null;
    AutoQuoteRequestId: number | null;
    Carrier: Partial<Carrier> | null;
    CarrierId: number;
    CarrierName: string | null;
    Id: number;
    LineOfBusiness: LineOfBusiness;
    Message: string | null;
    PersonalPropertyQuoteRequest: Partial<PersonalPropertyQuoteRequest> | null;
    PersonalPropertyQuoteRequestId: number | null;
}

export interface CarrierLogin {
    AgencyCode: string | null;
    Campaign: Partial<Campaign> | null;
    CampaignId: number;
    Carrier: Partial<Carrier> | null;
    CarrierId: number;
    CompanyUnits: Array<Partial<CompanyUnit>> | null;
    Id: number;
    ImageUrl: string | null;
    Password: string | null;
    Username: string | null;
}

export interface CompanyUnit {
    CarrierLogin: Partial<CarrierLogin> | null;
    CarrierLoginId: number;
    CompanyUnitId: number;
    Id: number;
    IsActive: boolean;
    LineOfBusiness: LineOfBusiness;
    State: string | null;
}

export interface Carrier {
    CarrierErrors: Array<Partial<CarrierError>> | null;
    CarrierLogins: Array<Partial<CarrierLogin>> | null;
    Id: number;
    Name: string | null;
}

export enum LineOfBusiness {
    PERSONAL_AUTO,
    HOMEOWNERS,
    PERSONAL_PACKAGE
}

export interface HomeOwnersCoverage {
    Description: string | null;
    HomeOwnersQuote: Partial<HomeOwnersQuote> | null;
    HomeOwnersQuoteId: number;
    Id: number;
    Premium: Partial<number>;
    Type: string | null;
    Waived: boolean;
}

export interface HomeOwnersQuote {
    CarrierName: string | null;
    CompanyUnitId: number;
    Coverages: Array<Partial<HomeOwnersCoverage>> | null;
    CreatedDate: string;
    EffectiveDate: string | null;
    ExpirationDate: string | null;
    Id: number;
    PersonalPropertyQuoteRequest: Partial<PersonalPropertyQuoteRequest> | null;
    PersonalPropertyQuoteRequestId: number;
    PolicyKey: string | null;
    Premium: Partial<number> | null;
    RatedTermMonths: number;
}

export enum CoApplicantRelationshipToInsured {
    SPOUSE,
    PARTNER,
    CHILD,
    OTHER_RELATIVE,
    OTHER_NON_RELATIVE,
    PARENT
}

export enum Section {
    None = 0,
    Home = 1,
    Auto = 2
}

export enum OverallQuality {
    Standard,
    High,
    Premium
}

export enum OccupantType {
    OWNER,
    TENANT
}

export enum HailResistantRoofType {
    NONE,
    CLASS_1,
    CLASS_2,
    CLASS_3,
    CLASS_4
}

export enum RoofType {
    ALUMINUM_SHINGLES,
    ARCHITECTURAL_SHINGLES,
    ASBESTOS,
    ASPHALT_SHINGLE,
    CEDAR_SHAKES,
    CEDAR_SHINGLES,
    CLAY_TILE_OR_SLATE,
    COMPOSITION_FIBERGLASS_ASPHALT_ETC,
    CONCRETE_TILE,
    CONCRETE_NOT_TILE,
    COPPER,
    FIBERGLASS,
    FOAM,
    GRAVEL,
    METAL,
    MINERAL_FIBER,
    MISSION_TILE,
    OTHER,
    PLASTIC,
    POURED,
    RECYCLED_ROOFING_PRODUCTS,
    ROCK,
    ROLLED_ROOFING,
    RUBBER_ROOF,
    SLATE,
    SPANISH_TILE,
    CORRUGATED_STEEL,
    STEEL_PORCELAIN_SHINGLES,
    TAR_AND_GRAVEL,
    TILE,
    TIN,
    WOOD_FIBER_SHINGLES,
    WOOD_SHAKES,
    WOOD_SHINGLES,
    WOOD_SHAKE_SHINGLE
}

export enum ConstructionType {
    FRAME,
    JOISTED_MASONRY,
    MASONRY,
    MASONRY_VENEER,
    MODIFIED_FIRE_RESISTIVE,
    FIRE_RESISTIVE_SUPERIOR,
    SUPERIOR_NON_COMBUSTIBLE,
    STUCCO,
    METAL_ALUMINUM_SIDING,
    CONCRETE,
    STEEL,
    MOBILE_HOME,
    LOG_HOME
}

export enum LastPageVisited {
    GettingStarted1,
    GettingStarted2,
    HomeOwnersStep1,
    HomeOwnersStep2,
    HomeOwnersStep3,
    HomeOwnersStep4,
    HomeOwnersStep5,
    HomeOwnersStep6,
    HomeOwnersStep7,
    HomeOwnersStep8,
    HomeOwnersStep9,
    HomeOwnersStep10,
    AutoStep1,
    AutoStep2,
    AutoStep3,
    AutoStep4,
    AutoStep5,
    ChooseBundle,
    Quotes,
    SelectedQuote
}

export interface PersonalPropertyQuoteRequest extends QuoteRequest {
    AcquisitionDate: string | null;
    Baths: Partial<number> | null;
    CarrierErrors: Array<Partial<CarrierError>> | null;
    City: string | null;
    ClaimsLast5Years: number | null;
    CoApplicantDateOfBirth: string | null;
    CoApplicantFirstName: string | null;
    CoApplicantLastName: string | null;
    CoApplicantRelationshipToInsured: CoApplicantRelationshipToInsured | null;
    ConstructionType: ConstructionType | null;
    CorrelationId: string | null;
    DistanceToFireDepartmentMiles: number | null;
    EffectiveDate: string | null;
    FoundationType: FoundationType | null;
    FulfillErrorMessage: string | null;
    HailResistantRoofType: HailResistantRoofType | null;
    HasAutomaticSprinklers: boolean | null;
    HasBurglarAlarm: boolean | null;
    HasCats: boolean | null;
    HasDeadBolts: boolean | null;
    HasDogs: boolean | null;
    HasFireAlarm: boolean | null;
    HasFireExtinguisher: boolean | null;
    HasFulfillBeenRequested: boolean;
    HasSmokeDetector: boolean | null;
    HasSwimmingPool: boolean | null;
    HasTrampoline: boolean | null;
    HomeOwnersQuotes: Array<Partial<HomeOwnersQuote>> | null;
    HomeStyle: HomeStyle | null;
    Id: number;
    IsWithin1000FeetOfRecognizedWaterSource: boolean | null;
    LastMajorRenovationYear: number | null;
    LastPageVisited: LastPageVisited;
    NumberOfBedrooms: number | null;
    NumberOfFullBaths: number | null;
    NumberOfHalfBaths: number | null;
    NumberOfHouseholdMembers: number | null;
    NumberOfRoofLayers: number | null;
    NumberOfStories: number | null;
    OccupantType: OccupantType | null;
    OverallQuality: OverallQuality | null;
    PrimaryHeatType: HeatType | null;
    RequestPayload: string | null;
    ResidenceType: ResidenceType | null;
    ResponsePayload: string | null;
    RoofStyle: RoofStyle | null;
    RoofType: RoofType | null;
    SectionCompleted: Section;
    SectionPartiallyCompleted: Section;
    SquareFootage: number | null;
    State: string | null;
    Street1: string | null;
    Street2: string | null;
    YearBuilt: number | null;
    Zip: string | null;
}

export enum HomeStyle {
    Unknown,
    Ranch,
    CapeCod,
    Colonial,
    BiLevel,
    SplitLevel,
    BackSplit,
    Bungalow,
    CondoCoOp,
    Contemporary,
    Cottage,
    FederalColonial,
    Mediterranean,
    OrnateVictorian,
    QueenAnne,
    RaisedRanch,
    Rambler,
    SouthwestAdobe,
    SplitFoyer,
    RowHouseCenter,
    RowHouseEnd,
    TriLevel,
    Victorian,
    BiLevelRowEnd,
    BiLevelRowCenter,
    TriLevelRowEnd,
    TriLevelRowCenter
}

export enum HeatType {
    Electric,
    Gas,
    Wood,
    Oil,
    Other
}

export enum FoundationType {
    SLAB,
    CRAWL_SPACE,
    BASEMENT,
    PIER,
    HILLSIDE,
    OTHER
}

export enum RoofStyle {
    Flat,
    Gable,
    Gambrel,
    Hip,
    Mansard,
    Shed,
    Turret
}

export enum ResidenceType {
    SingleFamilyDwelling,
    Condo,
    Apartment,
    MobileHome,
    CoOp,
    Townhouse,
    Rowhouse,
    Other
}

export interface CampaignSummaryDto {
    Attempted: number;
    CampaignId: number;
    Completed: number;
    Id: number;
    Name: string | null;
}

export interface CarrierErrorReportItem {
    CarrierId: number;
    CarrierName: string | null;
    ErrorCount: number;
}

export interface AutoQuoteRequestSummaryDto {
    CampaignSummaries: Array<Partial<CampaignSummaryDto>> | null;
    CarrierErrors: Array<Partial<CarrierErrorReportItem>> | null;
    Discounts: number;
    Drivers: number;
    Error: number;
    GettingStarted: number;
    Policy: number;
    Quotes: number;
    SelectedQuote: number;
    Vehicles: number;
}

export interface PersonalPropertyQuoteRequestSummaryDto {
    CampaignSummaries: Array<Partial<CampaignSummaryDto>> | null;
    CarrierErrors: Array<Partial<CarrierErrorReportItem>> | null;
    ChooseBundle: number;
    Errors: number;
    GettingStartedStep1: number;
    GettingStartedStep2: number;
    HomeOwnersStep1: number;
    HomeOwnersStep2: number;
    HomeOwnersStep3: number;
    HomeOwnersStep4: number;
    HomeOwnersStep5: number;
    HomeOwnersStep6: number;
    HomeOwnersStep7: number;
    HomeOwnersStep8: number;
    Quotes: number;
    SelectedQuote: number;
}

export interface HomeOwnersStepFiveDto {
    ClaimsLast5Years: number | null;
    LastMajorRenovationYear: number | null;
    OccupantType: OccupantType | null;
}

export interface HomeOwnersStepDixDto {
    HasCats: boolean | null;
    HasDogs: boolean | null;
    HasSwimmingPool: boolean | null;
    HasTrampoline: boolean | null;
}

export interface HomeOwnersStepSevenDto {
    CoApplicantRelationshipToInsured: CoApplicantRelationshipToInsured | null;
}

export interface HomeOwnersStepEightDto {
    CoApplicantDateOfBirth: string | null;
    CoApplicantFirstName: string | null;
    CoApplicantLastName: string | null;
}

export interface QuestionnaireResultSummaryDto {
    AdditionalInformation: number;
    BusinessClass: number;
    CoverageAmount: number;
    Error: number;
    GeneralInformation: number;
    GettingStarted: number;
    LLAttempt: number;
    LLCompleted: number;
    Location: number;
    MacuAttempt: number;
    MacuCompleted: number;
    Quotes: number;
    SelectedQuote: number;
}

export interface AutoAccidentDto {
    Date: string;
    DriverId: number;
    Id: number;
    Type: AccidentType | null;
    VertaforeType: VertaforeAccidentTypes | null;
}

export interface AutoDriverDto {
    Accidents: Array<Partial<AutoAccidentDto>> | null;
    DateOfBirth: string;
    DriverToVehicles: Array<Partial<AutoDriverToVehicleDto>> | null;
    FirstLicensedDate: string | null;
    FirstName: string | null;
    Gender: string | null;
    HasLicense: boolean | null;
    Id: number | null;
    IsLicenseCurrent: boolean | null;
    LastName: string | null;
    LicenseStatus: string | null;
    MaritalStatus: string | null;
    RelationshipToInsured: string | null;
    StateLicense: string | null;
}

export interface AutoDiscountsDto {
    DoesHouseholdConsumeAlcohol: boolean | null;
    EducationLevel: EducationLevelType | null;
    EnrollTelematicsProgram: boolean;
    PaperLess: boolean;
}

export interface HomeOwnersStepFourDto {
    HasAutomaticSprinklers: boolean | null;
    HasBurglarAlarm: boolean | null;
    HasDeadBolts: boolean | null;
    HasFireAlarm: boolean | null;
    HasFireExtinguisher: boolean | null;
    HasSmokeDetector: boolean | null;
}

export interface HomeOwnersStepThreeDto {
    Baths: Partial<number> | null;
    ConstructionType: ConstructionType | null;
    FoundationType: FoundationType | null;
    NumberOfBedrooms: number | null;
    NumberOfFullBaths: number | null;
    NumberOfStories: number | null;
    PrimaryHeatType: HeatType | null;
    RoofType: RoofType | null;
    SquareFootage: number | null;
    YearBuilt: number | null;
}

export interface HomeOwnersStepTwoDto {
    OverallQuality: OverallQuality | null;
}

export interface HomeOwnersStepOneDto {
    AcquisitionDate: string;
    HomeStyle: HomeStyle;
    ResidenceType: ResidenceType;
}

export interface GettingStartedStepTwoDto {
    City: string | null;
    EmailAddress: string | null;
    NextStep: Section;
    PhoneNumber: string | null;
    State: string | null;
    Street1: string | null;
    Street2: string | null;
    Zip: string | null;
}

export interface GettingStartedStepOneDto {
    Campaign: string | null;
    CampaignId: number;
    DateOfBirth: string;
    FirstName: string | null;
    LastName: string | null;
    LeadType: string | null;
    PersonalPropertyQuoteRequestId: number | null;
    RecaptchaUserResponse: string | null;
    UserGuid: string | null;
}

export interface AutoPreviousPoliciesDto {
    EffectiveDate: string | null;
    InjuryCoverageLimit: number | null;
    LiabilityCoverageLimit: number | null;
    MonthsInsured: number | null;
    PolicyExpirationDate: string | null;
}

export interface AutoVehicleDto {
    AnnualMiles: number;
    CollisionDeductible: number | null;
    ComprehensiveDeductible: number | null;
    Id: number | null;
    Make: string | null;
    Model: string | null;
    PrimaryUse: string | null;
    TowingCoverage: number | null;
    TransportationExpense: string | null;
    VIN: string | null;
    Year: number;
}

export interface AutoDriverToVehicleDto {
    DriverId: number;
    Id: number;
    VehicleId: number;
}

export interface LifeAboutYouAnswerDto {
    CoverageAmount: Partial<number>;
    Gender: GenderType;
    HealthRating: HealthRatingType;
    IsLargeQuoteRequest: boolean;
    ProductType: ProductType;
    Tobacco: TobaccoType;
}

export interface LifeAnswerDto {
    AllowTextMessaging: boolean;
    Campaign: string | null;
    CampaignId: number;
    City: string | null;
    CoverageAmount: Partial<number>;
    DateOfBirth: string;
    EmailAddress: string | null;
    FirstName: string | null;
    Gender: GenderType;
    HealthRating: HealthRatingType;
    HomePhoneNumber: string | null;
    IsLargeQuoteRequest: boolean;
    LastName: string | null;
    LeadType: string | null;
    LifeQuoteRequestId: number | null;
    PartnerId: string | null;
    ProductType: ProductType;
    RecaptchaUserResponse: string | null;
    ReferringUrl: string | null;
    State: string | null;
    Street1: string | null;
    Tobacco: TobaccoType;
    UserGuid: string | null;
    ZipCode: string | null;
}

export interface AutoGettingStartedAnswerDto {
    AgencyName: string | null;
    AllowTextMessaging: boolean;
    AutoQuoteRequestId: number | null;
    Campaign: string | null;
    City: string | null;
    DateOfBirth: string;
    EmailAddress: string | null;
    FirstName: string | null;
    HomePhoneNumber: string | null;
    LastName: string | null;
    LeadType: string | null;
    PartnerId: string | null;
    RecaptchaUserResponse: string | null;
    ReferringUrl: string | null;
    State: string | null;
    Street1: string | null;
    UserGuid: string | null;
    ZipCode: string | null;
}

export interface LifeGettingStartedAnswerDto {
    AllowTextMessaging: boolean;
    Campaign: string | null;
    CampaignId: number;
    City: string | null;
    DateOfBirth: string;
    EmailAddress: string | null;
    FirstName: string | null;
    HomePhoneNumber: string | null;
    LastName: string | null;
    LeadType: string | null;
    LifeQuoteRequestId: number | null;
    PartnerId: string | null;
    RecaptchaUserResponse: string | null;
    ReferringUrl: string | null;
    State: string | null;
    Street1: string | null;
    UserGuid: string | null;
    ZipCode: string | null;
}

export interface LifeQuoteErrorResultDto {
    DateSubmitted: string;
    ErrorMessage: string | null;
    LifeQuoteRequestId: number;
    Name: string | null;
}

export interface LifeQuoteRequestSummaryDto {
    AboutYou: number;
    Error: number;
    GettingStarted: number;
    LGNWAttempt: number;
    LGNWCompleted: number;
    LLAttempt: number;
    LLCompleted: number;
    MacuAttempt: number;
    MacuCompleted: number;
    MillionDollarQuote: number;
    Quotes: number;
    SelectedQuote: number;
    Uninsurable: number;
}

export interface VehicleDataDto {
    ABS: string | null;
    BodyType: string | null;
    Carburetor: string | null;
    FourWheelDrive: boolean;
    FuelType: string | null;
    Maker: string | null;
    Model: string | null;
    MSRP: number;
    NumCylinders: number;
    VIN: string | null;
    Year: number;
}

export interface VertaforeLiabilityCslbiLimitDto {
    Label: string | null;
    Value: string | null;
}

export interface Attachment extends ISynchronizable {
    BaseUncFileStoragePath: string | null;
    CdnFileName: string | null;
    DeletedDate: string | null;
    Description: string | null;
    Extension: string | null;
    Id: number;
    IsDeleted: boolean;
    Name: string | null;
    PreviewExtension: string | null;
    PreviewSizes: string | null;
    Size: number;
}

export interface User {
    AutoQuoteRequest: Array<Partial<AutoQuoteRequest>> | null;
    CellPhoneNumber: string | null;
    DateOfBirth: string;
    EloquaContactId: number | null;
    EmailAddress: string | null;
    FirstName: string | null;
    HomePhoneNumber: string | null;
    Id: number;
    LastName: string | null;
    LegalEntityName: string | null;
    LifeQuoteRequest: Array<Partial<LifeQuoteRequest>> | null;
    PersonalPropertyQuoteRequests: Array<Partial<PersonalPropertyQuoteRequest>> | null;
    QuestionnaireResults: Array<Partial<QuestionnaireResult>> | null;
    UserGuid: string | null;
    VelocifyLeadId: number | null;
    WorkPhoneNumber: string | null;
}

export interface ISynchronizable {
    CreatedDate: string;
    LastModifiedDate: string;
}

