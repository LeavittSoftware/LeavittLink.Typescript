// ----------------------
// <auto-generated>
//     generated using a custom program
// </auto-generated>
// ----------------------

export enum GenderType {
    Unknown = 0,
    Male = 1,
    Female = 2
}

export type GenderTypeString = keyof typeof GenderType;

export enum HealthRatingType {
    Unknown = 0,
    PreferredPlus = 1,
    Preferred = 2,
    StandardPlus = 3,
    Standard = 4
}

export type HealthRatingTypeString = keyof typeof HealthRatingType;

export enum ProductType {
    Unknown = 0,
    YearTerm5 = 1,
    YearTerm10 = 2,
    YearTerm15 = 3,
    YearTerm20 = 4,
    YearTerm25 = 5,
    YearTerm30 = 6,
    YearTerm35 = 7,
    YearTerm40 = 8
}

export type ProductTypeString = keyof typeof ProductType;

export interface QuoteRequest {
    Campaign: Partial<Campaign> | null;
    CampaignId: number | null;
    CreatedDate: string | null;
    EloquaCampaign: string | null;
    HasBeenFulfilled: boolean;
    LeadType: string | null;
    ReferringUrl: string | null;
    SelectedQuoteId: number | null;
    User: Partial<User> | null;
    UserId: number;
    VelocifyCampaignId: number;
}

export enum TobaccoType {
    Unknown = 0,
    Yes = 1,
    No = 2
}

export type TobaccoTypeString = keyof typeof TobaccoType;

export enum PhoneNumberType {
    Home = 0,
    Business = 1,
    Mobile = 2
}

export type PhoneNumberTypeString = keyof typeof PhoneNumberType;

export interface IAddress {
    City: string | null;
    County: string | null;
    State: string | null;
    Street1: string | null;
    Street2: string | null;
    Zip: string | null;
}

export interface ChangeStatus extends MsgStatus {
    ActionCode: string | null;
    ChangeDescription: string | null;
}

export interface Coverage {
    CoverageCode: string | null;
    CurrentRetroactiveDate: string | null;
    CurrentTermAmount: Partial<number> | null;
    Deductible: number | null;
    HartfordQuoteResponse: Partial<HartfordQuoteResponse> | null;
    HartfordQuoteResponseId: number;
    Id: number;
    Limit: number | null;
    Name: string | null;
    OptionTypeCode: string | null;
    OptionValue: string | null;
    SubjectInsuranceCode: string | null;
    ValuationCode: string | null;
}

export interface CoverageDescription {
    CoverageCode: string | null;
    Description: string | null;
    Id: number;
}

export interface ExtendedStatus extends MsgStatus {
    ExtendedStatusCode: string | null;
    ExtendedStatusDescription: string | null;
}

export interface HartfordCustomer {
    Id: number;
    OtherIdentifiers: Array<Partial<OtherIdentifier>> | null;
    User: Partial<User> | null;
    UserId: number;
}

export interface HartfordQuestionGroup {
    HartfordQuestionGroupId: number;
    Id: number;
    QuestionGroup: Partial<QuestionGroup> | null;
    SpectrumClasses: Array<Partial<HartfordQuestionGroupToSpectrumClass>> | null;
}

export interface HartfordQuestionAnswer {
    AnswerQuestionCode: string | null;
    Id: number;
    QuestionInputValue: Partial<QuestionInputValue> | null;
}

export interface HartFordQuestion {
    Id: number;
    Question: Partial<Question> | null;
    QuestionCode: string | null;
}

export interface HartfordQuestionGroupToSpectrumClass {
    HartfordQuestionGroup: Partial<HartfordQuestionGroup> | null;
    HartfordQuestionGroupId: number;
    Id: number;
    SpectrumClass: Partial<SpectrumClass> | null;
    SpectrumClassId: number;
}

export interface HartfordQuestionValidator {
    HartfordValidatorId: string | null;
    Id: number;
    ResponseValidator: Partial<ResponseValidator> | null;
}

export interface HartfordQuoteResponse {
    CompaniesQuoteNumber: string | null;
    Coverages: Array<Partial<Coverage>> | null;
    CreatedDate: string;
    EffectiveDate: string;
    ExpirationDate: string;
    FullTermAmt: Partial<number>;
    Id: number;
    MessageErrorCode: string | null;
    MessageStatusCode: string | null;
    MessageStatusDescription: string | null;
    MsgStatuses: Array<Partial<MsgStatus>> | null;
    OriginalPolicyNumber: string | null;
    PaymentOptions: Array<Partial<PaymentOption>> | null;
    PolicyNumber: string | null;
    QuestionnaireResult: Partial<QuestionnaireResult> | null;
    QuestionnaireResultId: number;
    QuoteInfoDescription: string | null;
    QuoteInfoInitialQuoteRequestDt: string | null;
    QuoteInfoInsurerId: string | null;
}

export interface HartfordQuoteXmlRequest {
    Bridged: boolean;
    CreatedDate: string;
    Id: number;
    QuestionnaireResult: Partial<QuestionnaireResult> | null;
    QuestionnaireResultId: number;
    XmlRequest: string | null;
    XmlResponse: string | null;
}

export interface Installment {
    Id: number;
    InstallmentAmount: Partial<number>;
    InstallmentDueDate: string;
    PaymentOption: Partial<PaymentOption> | null;
    PaymentOptionId: number;
}

export interface MsgStatus {
    HartfordQuoteResponse: Partial<HartfordQuoteResponse> | null;
    HartfordQuoteResponseId: number;
    Id: number;
}

export interface OccupancyCode {
    BuildingAge: BuildingAgeString;
    BuildingOccupancyCode: string | null;
    ClassCode: string | null;
    HartfordNumberOfStories: HartfordNumberOfStoriesString;
    Id: number;
    OccupancyQuestionInputValueId: number;
    OccupancyTypeCode: string | null;
    OccupancyTypeQuestionInputValueId: number;
    SortOrder: number;
}

export enum HartfordNumberOfStories {
    None = 0,
    OneToFour = 1,
    GreaterThanFour = 2,
    FiveToTwelve = 3,
    GreaterThanTwelve = 4
}

export type HartfordNumberOfStoriesString = keyof typeof HartfordNumberOfStories;

export enum BuildingAge {
    None = 0,
    LessThanThirty = 1,
    EqualOrGreaterThanThirty = 2
}

export type BuildingAgeString = keyof typeof BuildingAge;

export interface OtherIdentifier {
    HartfordCustomer: Partial<HartfordCustomer> | null;
    HartfordCustomerId: number;
    Id: number;
    OtherId: string | null;
    OtherTypeCode: string | null;
}

export interface PaymentOption {
    DayMonthDue: number;
    HartfordQuoteResponse: Partial<HartfordQuoteResponse> | null;
    HartfordQuoteResponseId: number;
    Id: number;
    InstallmentFeeAmount: Partial<number>;
    Installments: Array<Partial<Installment>> | null;
    PaymentPlanCode: number;
}

export interface SpectrumClass {
    ClassCode: number;
    Description: string | null;
    ExposureBaseCode: string | null;
    ExposureBaseName: string | null;
    HartfordQuestionGroups: Array<Partial<HartfordQuestionGroupToSpectrumClass>> | null;
    Id: number;
    IndustryName: string | null;
    MarketGroupCode: string | null;
    MarketGroupName: string | null;
    SpectrumProgramName: string | null;
    SpecturmProgramCode: string | null;
}

export interface DocumentPath {
    Id: number;
    Path: string | null;
    PathType: PathTypeString;
    Question: Partial<Question> | null;
    QuestionId: number | null;
    QuestionInputValue: Partial<QuestionInputValue> | null;
    QuestionInputValueId: number | null;
}

export enum PathType {
    Xpath = 0,
    Javascript = 1
}

export type PathTypeString = keyof typeof PathType;

export enum QuestionnaireResultStatus {
    GeneralInformation = 1,
    BusinessClass = 2,
    Location = 3,
    CoverageAmount = 4,
    AdditionalInformation = 5,
    Error = 6,
    Quotes = 7,
    SelectedQuote = 8
}

export type QuestionnaireResultStatusString = keyof typeof QuestionnaireResultStatus;

export enum QuestionGroupCovType {
    LiabilityOnly = 0,
    OCP = 1,
    PropertyOnly = 2,
    PropertyandLiability = 3
}

export type QuestionGroupCovTypeString = keyof typeof QuestionGroupCovType;

export enum QuestionGroupDriverType {
    Class = 0,
    LOB = 1,
    OptionalCvg = 2
}

export type QuestionGroupDriverTypeString = keyof typeof QuestionGroupDriverType;

export enum QuestionUiType {
    CheckBox = 0,
    Radio = 1,
    Text = 2,
    TextArea = 3,
    SingleSelect = 4,
    MultiSelect = 5
}

export type QuestionUiTypeString = keyof typeof QuestionUiType;

export interface ResponseValidatorActionToQuestionInputValue {
    Id: number;
    QuestionInputValue: Partial<QuestionInputValue> | null;
    QuestionInputValueId: number;
    ResponseValidatorAction: Partial<ResponseValidatorAction> | null;
    ResponseValidatorActionId: number;
}

export interface CollectionQuestion extends Question {
    MaxInstance: number;
    Questions: Array<Partial<Question>> | null;
}

export enum PredicateType {
    XpathExpression = 0,
    Regex = 1,
    Numeric = 2,
    NonNegative = 3,
    Integer = 4
}

export type PredicateTypeString = keyof typeof PredicateType;

export interface Question {
    Answers: Array<Partial<Answer>> | null;
    DocumentPaths: Array<Partial<DocumentPath>> | null;
    EndDate: string | null;
    FriendlyHelperText: string | null;
    FriendlyQuestionText: string | null;
    HartFordQuestion: Partial<HartFordQuestion> | null;
    HelperText: string | null;
    Hidden: boolean;
    Id: number;
    IsExpired: boolean;
    IsRequired: boolean;
    MaxLength: number;
    ParentCollectionQuestion: Partial<CollectionQuestion> | null;
    ParentCollectionQuestionId: number | null;
    QuestionFlowAugmentorActions: Array<Partial<QuestionFlowAugmentorAction>> | null;
    QuestionGroup: Partial<QuestionGroup> | null;
    QuestionGroupId: number;
    QuestionText: string | null;
    ResponseValidators: Array<Partial<ResponseValidator>> | null;
    Sequence: Partial<number>;
    SourceIdentifier: string | null;
    StartDate: string;
}

export interface FlowAugmentor {
    Actions: Array<Partial<FlowAugmentorAction>> | null;
    EndDate: string | null;
    Id: number;
    IsExpired: boolean;
    Predicate: string | null;
    PredicateType: PredicateTypeString;
    Question: Partial<StandardQuestion> | null;
    QuestionId: number;
    StartDate: string;
}

export interface QuestionGroup {
    EndDate: string | null;
    FriendlyName: string | null;
    HartfordQuestionGroup: Partial<HartfordQuestionGroup> | null;
    Id: number;
    IsExpired: boolean;
    IsRequired: boolean;
    Name: string | null;
    QuestionFlowAugmentorActions: Array<Partial<QuestionFlowAugmentorAction>> | null;
    QuestionGroupCovType: QuestionGroupCovTypeString;
    QuestionGroupDriverType: QuestionGroupDriverTypeString;
    QuestionGroupFlowAugmentorActions: Array<Partial<QuestionGroupFlowAugmentorAction>> | null;
    QuestionGroupType: QuestionGroupTypeString;
    QuestionnaireGroup: Partial<QuestionnaireGroup> | null;
    QuestionnaireGroupId: number | null;
    Questions: Array<Partial<Question>> | null;
    SourceIdentifier: string | null;
    StartDate: string;
}

export enum QuestionGroupType {
    HartfordEligibility = 0,
    HartfordLocation = 1,
    HartfordPolicy = 2,
    HartfordAccord = 3
}

export type QuestionGroupTypeString = keyof typeof QuestionGroupType;

export enum QuestionInputType {
    String = 0,
    Date = 1,
    Integer = 2,
    Boolean = 3,
    Decimal = 4
}

export type QuestionInputTypeString = keyof typeof QuestionInputType;

export interface QuestionInputValue {
    Answer: string | null;
    DisplayAnswer: string | null;
    DocumentPaths: Array<Partial<DocumentPath>> | null;
    EndDate: string | null;
    FriendlyDisplayAnswer: string | null;
    FriendlyHelpText: string | null;
    HartfordQuestionAnswer: Partial<HartfordQuestionAnswer> | null;
    HelpText: string | null;
    Id: number;
    IsExpired: boolean;
    Question: Partial<StandardQuestion> | null;
    QuestionId: number;
    ResponseValidatorActionToQuestionInputValues: Array<Partial<ResponseValidatorActionToQuestionInputValue>> | null;
    Sequence: Partial<number>;
    StartDate: string;
}

export interface Questionnaire {
    Id: number;
    Name: string | null;
    QuestionnaireGroups: Array<Partial<QuestionnaireGroup>> | null;
    QuestionnaireResults: Array<Partial<QuestionnaireResult>> | null;
    SourceIdentifier: string | null;
}

export interface QuestionnaireGroup {
    FriendlyName: string | null;
    Id: number;
    Name: string | null;
    QuestionGroupFlowAugmentorActions: Array<Partial<QuestionGroupFlowAugmentorAction>> | null;
    QuestionGroups: Array<Partial<QuestionGroup>> | null;
    Questionnaire: Partial<Questionnaire> | null;
    QuestionnaireId: number;
    Sequence: Partial<number>;
    SourceIdentifier: string | null;
}

export interface ResponseValidator {
    Actions: Array<Partial<ResponseValidatorAction>> | null;
    EndDate: string | null;
    HartfordQuestionValidator: Partial<HartfordQuestionValidator> | null;
    Id: number;
    IsExpired: boolean;
    Predicate: string | null;
    PredicateType: PredicateTypeString;
    Question: Partial<Question> | null;
    QuestionId: number;
    StartDate: string;
}

export interface StandardQuestion extends Question {
    DefaultAnswerValue: string | null;
    FlowAugmentors: Array<Partial<FlowAugmentor>> | null;
    QuestionInputType: QuestionInputTypeString;
    QuestionInputValues: Array<Partial<QuestionInputValue>> | null;
    QuestionUiType: QuestionUiTypeString;
}

export interface QuestionnaireResult {
    Answers: Array<Partial<Answer>> | null;
    Campaign: Partial<Campaign> | null;
    CampaignId: number | null;
    CreatedDate: string | null;
    EloquaCampaign: string | null;
    HartfordQuoteResponses: Array<Partial<HartfordQuoteResponse>> | null;
    HartfordQuoteXmlRequests: Array<Partial<HartfordQuoteXmlRequest>> | null;
    HasBeenFulfilled: boolean;
    Id: number;
    LeadType: string | null;
    Questionnaire: Partial<Questionnaire> | null;
    QuestionnaireId: number;
    ReferringUrl: string | null;
    Status: QuestionnaireResultStatusString;
    User: Partial<User> | null;
    UserId: number;
    VelocifyCampaignId: number | null;
}

export enum ResponseValidatorActionType {
    HardStop = 0,
    Alert = 1,
    Validation = 2,
    SelectFilter = 3
}

export type ResponseValidatorActionTypeString = keyof typeof ResponseValidatorActionType;

export interface ResponseValidatorAction {
    EndDate: string | null;
    FriendlyMessage: string | null;
    Id: number;
    IsExpired: boolean;
    Message: string | null;
    ResponseValidator: Partial<ResponseValidator> | null;
    ResponseValidatorActionToQuestionInputValues: Array<Partial<ResponseValidatorActionToQuestionInputValue>> | null;
    ResponseValidatorId: number;
    StartDate: string;
    Type: ResponseValidatorActionTypeString;
}

export interface AddAnswerFlowAugmentorAction extends FlowAugmentorAction {
    AnswerPath: string | null;
    AnswerValue: string | null;
}

export interface QuestionGroupFlowAugmentorAction extends FlowAugmentorAction {
    QuestionGroup: Partial<QuestionGroup> | null;
    QuestionGroupId: number;
    QuestionnaireGroup: Partial<QuestionnaireGroup> | null;
    QuestionnaireGroupId: number;
}

export enum FlowAugmentorActionType {
    Add = 0,
    AddAnswer = 1,
    Remove = 2,
    Show = 3
}

export type FlowAugmentorActionTypeString = keyof typeof FlowAugmentorActionType;

export enum FlowAugmentorActionPlacement {
    Next = 0,
    Last = 1,
    AtIndex = 2
}

export type FlowAugmentorActionPlacementString = keyof typeof FlowAugmentorActionPlacement;

export interface FlowAugmentorAction {
    EndDate: string | null;
    FlowAugmentor: Partial<FlowAugmentor> | null;
    FlowAugmentorId: number;
    Id: number;
    Index: number | null;
    IsExpired: boolean;
    Placement: FlowAugmentorActionPlacementString;
    StartDate: string;
    Type: FlowAugmentorActionTypeString;
}

export interface QuestionFlowAugmentorAction extends FlowAugmentorAction {
    Question: Partial<Question> | null;
    QuestionGroup: Partial<QuestionGroup> | null;
    QuestionGroupId: number;
    QuestionId: number;
}

export interface BopAnswer extends Answer {
    LocationGuid: string | null;
    SourceIdentifier: string | null;
    Value: string | null;
    XPath: string | null;
}

export interface Answer {
    CreatedDate: string;
    Id: number;
    QuestionnaireResult: Partial<QuestionnaireResult> | null;
    QuestionnaireResultId: number;
    QuestionText: string | null;
}

export enum AutoQuoteRequestStatus {
    GettingStarted = 0,
    Policy = 1,
    Vehicles = 2,
    Drivers = 3,
    Discounts = 4,
    Error = 5,
    Quotes = 6,
    SelectedQuote = 7
}

export type AutoQuoteRequestStatusString = keyof typeof AutoQuoteRequestStatus;

export enum CurrentPriorInsuranceType {
    Standard = 0,
    None = 1
}

export type CurrentPriorInsuranceTypeString = keyof typeof CurrentPriorInsuranceType;

export interface DriverToVehicle {
    Driver: Partial<Driver> | null;
    DriverId: number;
    Id: number;
    Vehicle: Partial<Vehicle> | null;
    VehicleId: number;
}

export interface Accident {
    AmountOverSpeedLimit: number | null;
    BloodAlcoholLevel: number | null;
    DamageAmount: number | null;
    Date: string;
    Driver: Partial<Driver> | null;
    DriverId: number;
    Id: number;
    InjuryAmount: number | null;
    Type: AccidentTypeString | null;
    VertaforeType: VertaforeAccidentTypesString | null;
}

export enum EducationLevelType {
    NoHighSchoolDiplomaOrGed = 0,
    HighSchoolDiplomaOrGed = 1,
    VocationalTradeSchoolMilitary = 2,
    CompletedSomeCollege = 3,
    CurrentlyInCollege = 4,
    CollegeDegree = 5,
    GraduateWorkOrGraduateDegree = 6
}

export type EducationLevelTypeString = keyof typeof EducationLevelType;

export enum VertaforeAccidentTypes {
    Speeding = 0,
    DWI = 1,
    StopSign = 2,
    NotAtFaultAccident = 3,
    OtherMinorViolation = 4,
    OtherMajorViolation = 5,
    NotAtFaultOther = 6,
    AllOtherMinorInfractions = 7,
    FailuretoStop = 8
}

export type VertaforeAccidentTypesString = keyof typeof VertaforeAccidentTypes;

export enum AccidentType {
    vcConsumingAlcohol = 1,
    vcDrvBusWhileIntox = 2,
    vcDUI = 3,
    vcDWAI = 4,
    vcDWI = 5,
    vcEdProgRequired = 6,
    vcIllegalTransport = 7,
    vcImpliedConsent = 8,
    vcOpenContainer = 9,
    vcOperWhileIntox = 10,
    vcLiquorViol = 11,
    vcPedAcc = 12,
    vcAccAtFault = 13,
    vcHomocide = 14,
    vcManslaughter = 15,
    vcDUID = 16,
    vcPossessionofSubst = 17,
    vcHeadlightViol = 18,
    vcMotorcycleEquipViol = 19,
    vcDefectiveEquip = 20,
    vcOverheight = 21,
    vcOverlength = 22,
    vcChangedLanesUnsafe = 23,
    vcCrossingCenterMed = 24,
    vcCrossingDividedHwy = 25,
    vcCrossingYellowLine = 26,
    vcDisregardNoPassZone = 27,
    vcDrvOnLeftSide = 28,
    vcDrvOnShoulder = 29,
    vcDrvOnSidewalk = 30,
    vcFailKeepRight = 31,
    vcIllegalPass = 32,
    vcImproperMerging = 33,
    vcImproperPass = 34,
    vcPassSchoolBus = 35,
    vcImproperLaneUse = 36,
    vcOperWhereProhib = 37,
    vcAllowUnlicensed = 38,
    vcAlteredDL = 39,
    vcDisplayAnothersDL = 40,
    vcLicSuspended = 41,
    vcExpired = 42,
    vcNoLicense = 43,
    vcDuplicateDL = 44,
    vcFailDisplayDL = 45,
    vcFalseLicense = 46,
    vcLoanedDL = 47,
    vcNoChaufferLicense = 48,
    vcNoDL = 49,
    vcNoMotorcycleQualif = 50,
    vcObtainByMisrep = 51,
    vcOperDuringSusp = 52,
    vcOperateOutOfClass = 53,
    vcChargeableSuspension = 54,
    vcViolateDLRestrict = 55,
    vcPermitViol = 56,
    vcNoLights = 57,
    vcFailDimHeadLights = 58,
    vcAccNotAtFault = 59,
    vcDisobeyPolice = 60,
    vcEludPolice = 61,
    vcAvoidTrafficControl = 62,
    vcFailToGiveSignal = 63,
    vcFailToStopForTrain = 64,
    vcFailObeyRailRoad = 65,
    vcRunRedLight = 66,
    vcRunStopSign = 67,
    vcFailYieldPedestrian = 68,
    vcFailRightOfWay = 69,
    vcFailEmergencyVeh = 70,
    vcImproperSignal = 71,
    vcTooFast = 72,
    vcTooSlowForConditions = 73,
    vcDrvUnderMinimum = 74,
    vcExcessAcceleration = 75,
    vcFailControlSpeed = 76,
    vcRacing = 77,
    vcSpeeding = 78,
    vcSpeedSchoolZone = 79,
    vcUnsafeSpeed = 80,
    vcImproperStart = 81,
    vcSquealingTires = 82,
    vcUnsafeStart = 83,
    vcImproperTowing = 84,
    vcTurnedAcrossDivided = 85,
    vcTurnedWhenUnsafe = 86,
    vcDriveLeftOfCenter = 87,
    vcWrongSideOfRoad = 88,
    vcWrongWayOnOneway = 89,
    vcWrongWayIsland = 90,
    vcWrongWayOnRoadway = 91,
    vcAssaultWAuto = 92,
    vcMiscMovingViol = 93,
    vcMiscNonMovingViol = 94,
    vcAlteredVIN = 95,
    vcImproperBacking = 96,
    vcCarPoolViol = 97,
    vcCarelessDriving = 98,
    vcChangeDriverMoving = 99,
    vcCoasting = 100,
    vcConvictionInsFraud = 101,
    vcCriminalNegligence = 102,
    vcDisregardSafety = 103,
    vcDriversViewObstruct = 104,
    vcDriveOnFireHose = 105,
    vcDrvInSafetyZone = 106,
    vcDrivingWOConsent = 107,
    vcFailControlVehicle = 108,
    vcFailToExchangeInfo = 109,
    vcNoPayToll = 110,
    vcFailToWearBelt = 111,
    vcFailureOfDuty = 112,
    vcFailSoundHorn = 113,
    vcFelony = 114,
    vcFollowingImproper = 115,
    vcFollowingTooClose = 116,
    vcImpedingTraffic = 117,
    vcImproperDriving = 118,
    vcBadTurnpikeStyle = 119,
    vcIncreaseWhilePassed = 120,
    vcUnattendedCar = 121,
    vcLeavingScene = 122,
    vcMVIViolation = 123,
    vcNegligentCollision = 124,
    vcNegligentDriving = 125,
    vcNoLiabInsurance = 126,
    vcParkingOnRoadway = 127,
    vcProhibUTurn = 128,
    vcProtectiveHeadGear = 129,
    vcReckless = 130,
    vcStealingAuto = 131,
    vcUnrestrainedChild = 132,
    vcUnsafeOperator = 133,
    vcEmissionsViol = 134,
    vcVehiclularInjury = 135,
    vcViolSafetyZone = 136,
    vcViolatePromiseAppear = 137,
    vcCompClaim = 138,
    vcAllowUnlawfulOperation = 139,
    vcUMClaim = 140,
    vcUIMClaim = 141,
    MaxViolations = 142,
    vcCAFirstViolCode = 501,
    vcAccidentAtFaultNoInjury = 502,
    vcAccidentAtFaultInjury = 503,
    vcFailureToReportAccident = 504,
    vcAccidentNotAtFault = 505,
    vcAggravatedAssaultWithAuto = 506,
    vcAllOtherMovingViolations = 507,
    vcAllOtherNonMovingViolations = 508,
    vcAllowUnlawfulOperationOfVehicle = 509,
    vcAllowUnlicensedDriver = 510,
    vcAlteredForgedVIN = 511,
    vcFailureToObeyTrafficDevice = 512,
    vcUnsafeStartingBacking = 513,
    vcDiamondLane = 514,
    vcDiamondLaneCrossDoubleLine = 515,
    vcCACarelessDriving = 516,
    vcUnsafeLaneChange = 517,
    vcChangingDriverMovingVehicle = 518,
    vcCoastingGearsDisengaged = 519,
    vcComprehensiveClaim = 520,
    vcConsumingAlcoholWhileDriving = 521,
    vcConvictionOfInsuranceFraud = 522,
    vcCACriminalNegligence = 523,
    vcCrossingCenterMedian = 524,
    vcCrossingDividedHighway = 525,
    vcCACrossingYellowLine = 526,
    vcDisobeyPoliceOfficer = 527,
    vcDisobeyTollHighwayOfficer = 528,
    vcDisplayAlteredCounterfeitLicense = 529,
    vcDisplayOtherPersonsLicense = 530,
    vcDisregardNoPassingZone = 531,
    vcDisregardOfSafety = 532,
    vcDrivingLeftOfCenter = 533,
    vcDriversViewObstructed = 534,
    vcDrivingAtNightWithoutLights = 535,
    vcDrivingOnLeftSideOfRoadway = 536,
    vcDrivingOnShoulder = 537,
    vcDrivingOnSidewalk = 538,
    vcDrivingWrongSideOfRoad = 539,
    vcDrivingOverFireHose = 540,
    vcDrivingSchoolBusWhileIntoxicated = 541,
    vcDrivingThroughSafetyZone = 542,
    vcDrivingTooFastForConditions = 543,
    vcDrivingTooSlowForConditions = 544,
    vcDrivingWithoutOwnersConsent = 545,
    vcDrivingWhileSuspendedRevoked = 546,
    vcDrivingWithExpiredLicense = 547,
    vcDrivingWithoutLicensePermit = 548,
    vcDrivingWrongWayOneWay = 549,
    vcDrivingWrongSideDividedHighway = 550,
    vcDrivingUnderMinimum = 551,
    vcDUIAlcoholDrugsNoInjury = 552,
    vcDUIAlcoholDrugsInjuryOrDeath = 553,
    vcMinorWithBACOverZeroFive = 554,
    vcMinorWithBACOverZeroOne = 555,
    vcDuplicateDriversLicense = 556,
    vcEducationProgramRequired = 557,
    vcEvadingPeaceOfficer = 558,
    vcEvadingPeaceOfficerReckless = 559,
    vcEvadingPeaceOfficerInjury = 560,
    vcExcessiveAcceleration = 561,
    vcFailToControlSpeed = 562,
    vcFailToControlVehicle = 563,
    vcFailToDisplayDriversLicense = 564,
    vcFailToExchangeInformation = 565,
    vcImproperTurnNoSignal = 566,
    vcVehicleXingEvadingToll = 567,
    vcFailToStopApproachingTrain = 568,
    vcStopRequiredRailroadCrossing = 569,
    vcFailToStopRedLight = 570,
    vcFailToStopStopSign = 571,
    vcFailToWearSeatBelt = 572,
    vcYieldingRightOfWayPedestrian = 573,
    vcFailureToYieldRightOfWay = 574,
    vcFailureToYieldEmergencyVehicle = 575,
    vcFailureOfDutyInjuryOrDeath = 576,
    vcFailureToDimLights = 577,
    vcFailureToKeepRight = 578,
    vcFailureToSoundHorn = 579,
    vcFalseEvidenceOfRegistration = 580,
    vcFelonyInvolvingMotorVehicle = 581,
    vcFollowingImproperly = 582,
    vcFollowingTooClosely = 583,
    vcDistanceBetweenVehicles = 584,
    vcGivingImproperSignal = 585,
    vcHomicideWithMotorVehicle = 586,
    vcPassingOnRightOrShoulder = 587,
    vcIllegalTransportationOfAlcohol = 588,
    vcImpedingTrafficMovement = 589,
    vcRefusalToSubmitToTest = 590,
    vcCAImproperDriving = 591,
    vcFreewayRampEnteringExiting = 592,
    vcImproperMergingIntoTraffic = 593,
    vcIllegalImproperUnsafePassing = 594,
    vcStopForSchoolBus = 595,
    vcCAImproperStart = 596,
    vcImproperTowingRiding = 597,
    vcCAImproperLaneUse = 598,
    vcIncreaseSpeedWhileBeingPassed = 599,
    vcLeaveEngineRunning = 600,
    vcHitAndRunInjury = 601,
    vcHitAndRunNoInjury = 602,
    vcLightViolations = 603,
    vcLoanLicenseToOther = 604,
    vcClaimMedicalPayments = 605,
    vcMotorVehicleInspection = 606,
    vcMotorcyclePassengersEquipment = 607,
    vcCANegligentCollision = 608,
    vcCANegligentDriving = 609,
    vcNoChauffeursLicense = 610,
    vcNoDriversLicense = 611,
    vcNoLiabilityInsurance = 612,
    vcNoMotorcycleQualification = 613,
    vcObtainLicenseByMisrepresentation = 614,
    vcOpenContainerDriving = 615,
    vcOpenContainerPossession = 616,
    vcOperatingDuringLifeSuspension = 617,
    vcOperatingOutOfClassification = 618,
    vcOperatingWhereProhibited = 619,
    vcUnsafeUnlawfullyEquippedVehicle = 620,
    vcOverheightVehicle = 621,
    vcOverlengthVehicle = 622,
    vcCAParkingOnRoadway = 623,
    vcPossessionControlledSubstance = 624,
    vcIllegalTurnUTurn = 625,
    vcIllegalTurnUTurnAtIntersection = 626,
    vcCAProtectiveHeadGear = 627,
    vcSpeedContestExhibitionOfSpeed = 628,
    vcSpeedContestAidingAndAbetting = 629,
    vcRecklessDrivingNoInjury = 630,
    vcRecklessDrivingInjury = 631,
    vcSpeeding65AndUnder = 632,
    vcSpeedingOver65 = 633,
    vcSpeedingOver100 = 634,
    vcSpeedingTruckTractor = 635,
    vcSpeedingConstructionZone = 636,
    vcSpeedingWhileTowing = 637,
    vcCommercialSpeedVehicle = 638,
    vcSpeedingInSchoolZone = 639,
    vcSquealingScreechingTires = 640,
    vcCAStealingAuto = 641,
    vcSuspensionChargeable = 642,
    vcTurnAcrossDividedSection = 643,
    vcUnsafeTurn = 644,
    vcClaimUIM = 645,
    vcClaimUM = 646,
    vcChildPassengerRestraint = 647,
    vcCAUnsafeOperator = 648,
    vcRestrictedSpeedWeatherConditions = 649,
    vcUnsafeStartParkStopStanding = 650,
    vcVehicleEmissionsSuspension = 651,
    vcVehicularInjury = 652,
    vcVehicularManslaughterGrossNegligence = 653,
    vcVehicularManslaughterNoGrossNegligence = 654,
    vcViolationOfLicenseRestrictions = 655,
    vcDrivingHoursEquipmentMaintenanceOperation = 656,
    vcPermitDriverOutOfClassification = 657,
    vcDrinkingInVehicle = 658,
    vcPossessionOfAlcohol = 659,
    vcViolationOfPromiseToAppear = 660,
    vcWrongDirectionAroundTrafficIsland = 661,
    vcWrongDirectionDividedStreet = 662,
    vcClaimLiability = 663,
    vcClaimCollision = 664,
    vcClaimTowing = 665,
    vcViolationOfSuspensionDUI = 666,
    vcViolationOfRestrictionDUI = 667,
    vcFalseStatement = 668,
    vcFinancialResponsibility = 669,
    vcBrakes = 670,
    vcLicensePlate = 671,
    vcExhaustModified = 672,
    vcExplosivesTransportation = 673,
    vcInterfereWithTrafficDevice = 674,
    vcInterfereWithTrafficDeviceInjury = 675,
    vcMaliciousMischiefTampering = 676,
    vcMaliciousActsBodilyHarm = 677,
    vcMaliciousActsRemoveMarker = 678,
    vcThrowingSubstance = 679,
    vcThrowingSubstanceInjury = 680,
    vcThrowingLightedSubstance = 681,
    vcThrowingMatterOnHighway = 682,
    vcDisobeyConstructionSigns = 683,
    vcPassingAnimals = 684,
    vcPassCarStoppedForPedestrian = 685,
    vcMaximumDesignatedSpeedVehicle = 686,
    vcStopAtInoperativeSignal = 687,
    vcTurnProhibitedBySign = 688,
    vcTurnOnRedLight = 689,
    vcUseOfTwoWayLeftTurnLane = 690,
    vcTurnAcrossBicycleLane = 691,
    vcYieldOnLeftTurn = 692,
    vcYieldRightOfWayToBlindPedestrian = 693,
    vcYieldWhenOvertaken = 694,
    vcTranportingPersonInTruckLoadSpace = 695,
    vcUnsafeOverweightLoad = 696,
    vcUnsafeLoadNoPermit = 697,
    vcEnterIntersectionWithoutSpace = 698,
    vcTurnAtIntersectionWithoutSpace = 699,
    vcAlteredLicensePlates = 700,
    vcDoubleLinesOneBrokenLine = 701,
    vcDrivingWithParkingLights = 702,
    vcEnteringHighwayFromServiceRoad = 703,
    vcOnRampExit = 704,
    vcOpenDoor = 705,
    vcRightOfOncomingVehicle = 706,
    vcThreeLaneHighway = 707,
    vcViolatingPromiseToCorrect = 708,
    vcUsingWirelessPhone = 709,
    vcUsingWirelessPhoneUnder18 = 710,
    vcTexting = 711,
    vcTurnLaneUse = 712,
    vcYieldToVehicleInIntersection = 713,
    vcFailureToStop = 714,
    vcDUIDrugsNoInjury = 715,
    vcFailToYieldEnteringHighway = 716,
    vcInsufficientSpaceAtRRCrossing = 717,
    vcCommercialSpeed = 718,
    vcDrivingUnregistered = 719,
    vcLighting = 720,
    vcOtherEquipment = 721,
    vcTransportingExplosives = 722,
    vcPassingSubjectToSection = 723,
    vcOtherYield = 724,
    vcSpillingLoad = 725,
    vcCommercialChargeable = 726,
    vcCommercialChargeableMoving = 727,
    vcCommercialNonChargeable = 728,
    vcCommercialNonChargeableMoving = 729,
    vcDrivingOnLevee = 730,
    vcProhibitedBikePath = 731,
    vcCoastingProhibited = 732,
    vcRidingInTrailer = 733,
    CAMaxViolations = 734,
    AllOtherNonStandardCompID = -2147483647,
    AllOtherStandardCompID = -2147483646,
    AllOtherNonVoluntaryCompID = -2147483645
}

export type AccidentTypeString = keyof typeof AccidentType;

export interface ClientDetail extends IAddress {
    AutoQuoteRequest: Partial<AutoQuoteRequest> | null;
    Id: number;
    IsHomeOwned: boolean | null;
    IsTextMessagingAllowed: boolean;
}

export interface IVehicle {
    Make: string | null;
    Model: string | null;
    ModelYear: number;
    VIN: string | null;
}

export interface Driver {
    Accidents: Array<Partial<Accident>> | null;
    AutoQuoteRequest: Partial<AutoQuoteRequest> | null;
    AutoQuoteRequestId: number;
    DateOfBirth: string;
    DriverToVehicles: Array<Partial<DriverToVehicle>> | null;
    FirstLicensedDate: string | null;
    FirstName: string | null;
    Gender: string | null;
    HasLicense: boolean | null;
    Id: number;
    IsLicenseCurrent: boolean | null;
    LastName: string | null;
    LicenseStatus: string | null;
    MaritalStatus: string | null;
    RelationshipToInsured: string | null;
    StateLicense: string | null;
}

export interface VertaforeAutoLookup {
    AirBagRear: boolean;
    Alarm: boolean;
    AntilockBrakes: boolean;
    AntilockBrakes4Wheels: boolean;
    AntiTheftDevice: boolean;
    AutomaticSeatbelts: boolean;
    BodyType: string | null;
    CostNewCollSym: string | null;
    CostNewCompSym: string | null;
    CountryWidePerformance: string | null;
    Cylinders: number;
    DaytimeRunningLights: boolean;
    EngineDisplacementCubicInches: number;
    EngineSize: string | null;
    EngineType: string | null;
    FourWheelDrive: string | null;
    FullModelName: string | null;
    GVWWildCard: number;
    ISOCollSym: string | null;
    ISOCompSym: string | null;
    ISOLiabilitySymbol: string | null;
    ISOMedicalSymbol: string | null;
    ISOPerformanceCd: string | null;
    IsoSymbol: string | null;
    Key: string | null;
    ModelYear: string | null;
    NumericSymbol: string | null;
    PassiveAntiTheftDevice: boolean;
    PassiveRestraintDriver: boolean;
    PassiveRestraintPassenger: boolean;
    Performance: string | null;
    PLRMake: string | null;
    PriceNewSym: string | null;
    SideAirBags: boolean;
    VehEngine: string | null;
    VehId: string | null;
    VehMake: string | null;
    VehModel: string | null;
    VehSymbol: string | null;
    VehType: string | null;
    VehVIN: string | null;
    VINMasterVINPrefix: string | null;
    VINPrefix: string | null;
}

export interface PreviousPolicy {
    AutoQuoteRequest: Partial<AutoQuoteRequest> | null;
    CurrentPriorInsurance: CurrentPriorInsuranceTypeString | null;
    DoesHouseholdConsumeAlcohol: boolean | null;
    EducationLevel: EducationLevelTypeString;
    EffectiveDate: string | null;
    EnrollTelematicsProgram: boolean | null;
    Id: number;
    InjuryCoverageLimit: number;
    LiabilityCoverageLimit: number;
    MonthsInsured: number | null;
    PaperLess: boolean | null;
    PleaseAdviseMe: boolean | null;
    PolicyExpirationDate: string | null;
    PropertyDamageCoverageLimit: number | null;
    WasInsuredLast30Days: boolean;
}

export interface AutoQuote {
    AutoQuoteRequest: Partial<AutoQuoteRequest> | null;
    AutoQuoteRequestId: number;
    CarrierCompanyName: string | null;
    CompanyUnitId: number;
    CreatedDate: string;
    Error: string | null;
    FatalError: string | null;
    Id: number;
    LogoUrl: string | null;
    PayPlanDownPayment: number;
    PayPlanNumOfPayments: number;
    PayPlanPaymentAmount: number;
    PhoneCode: string | null;
    Premium: number;
    Term: number;
    Vehicles: Array<Partial<QuotedVehicle>> | null;
}

export interface QuotedVehicle extends IVehicle {
    AutoQuote: Partial<AutoQuote> | null;
    AutoQuoteId: number;
    CollisionDeductible: number | null;
    CollisionLimit: number | null;
    CollisionPremium: number | null;
    ComprehensiveDeductible: number | null;
    ComprehensiveLimit: number | null;
    ComprehensivePremium: number | null;
    Id: number;
    InjuryLimit: number | null;
    LiabilityBodilyInjuryDeductible: number | null;
    LiabilityBodilyInjuryPremium: number | null;
    LiabilityLimit: number | null;
    MedicalPaymentsDeductible: number | null;
    MedicalPaymentsLimit: number | null;
    MedicalPaymentsPremium: number | null;
    PersonalInjuryProtectionDeductible: number | null;
    PersonalInjuryProtectionLimit: number | null;
    PersonalInjuryProtectionPremium: number | null;
    PropertyDamageDeductible: number | null;
    PropertyDamageLimit: number | null;
    PropertyDamagePremium: number | null;
    RentalDeductible: number | null;
    RentalLimit: number | null;
    RentalPremium: number | null;
    TowingDeductible: number | null;
    TowingLimit: number | null;
    TowingPremium: number | null;
    UninsuredMotoristBodilyInjuryDeductible: number | null;
    UninsuredMotoristBodilyInjuryLimit: number | null;
    UninsuredMotoristBodilyInjuryPremium: number | null;
}

export interface AutoQuoteRequest extends QuoteRequest {
    AutoQuotes: Array<Partial<AutoQuote>> | null;
    CarrierErrors: Array<Partial<CarrierError>> | null;
    ClientDetail: Partial<ClientDetail> | null;
    Drivers: Array<Partial<Driver>> | null;
    HasFulfillBeenRequested: boolean;
    Id: number;
    IsVertafore: boolean | null;
    PlRaterExportQuoteUrl: string | null;
    PreviousPolicy: Partial<PreviousPolicy> | null;
    QuoteNotificationId: number;
    QuotingErrors: string | null;
    RequestedPolicyStartDate: string | null;
    RequestPayload: string | null;
    ResponsePayload: string | null;
    Status: AutoQuoteRequestStatusString;
    TransactionId: string | null;
    Vehicles: Array<Partial<Vehicle>> | null;
}

export interface Vehicle extends IVehicle {
    AnnualMilesDriven: number;
    AutoQuoteRequest: Partial<AutoQuoteRequest> | null;
    AutoQuoteRequestId: number;
    CollisionDeductible: number | null;
    ComprehensiveDeductible: number | null;
    DriverToVehicles: Array<Partial<DriverToVehicle>> | null;
    Id: number;
    MSRP: number | null;
    PrimaryDriverId: number | null;
    RentalCarReimbursementLimit: number | null;
    Sequence: number;
    TowingCoverageLimit: number | null;
    TransportationExpense: string | null;
    VehicleUsage: string | null;
}

export interface Campaign {
    AutoQuoteRequests: Array<Partial<AutoQuoteRequest>> | null;
    CampaignImageAttachment: Partial<CampaignImageAttachment> | null;
    CarrierLogins: Array<Partial<CarrierLogin>> | null;
    Id: number;
    LifeQuoteRequests: Array<Partial<LifeQuoteRequest>> | null;
    Name: string | null;
    PersonalPropertyQuoteRequests: Array<Partial<PersonalPropertyQuoteRequest>> | null;
    VelocifyCampaignId: number;
    VelocifyCampaigns: Array<Partial<VelocifyCampaign>> | null;
}

export interface CarrierImageAttachment extends Attachment {
    Carrier: Partial<Carrier> | null;
    Id: number;
}

export interface CampaignImageAttachment extends Attachment {
    Campaign: Partial<Campaign> | null;
    Id: number;
}

export interface CarrierError {
    AutoQuoteRequest: Partial<AutoQuoteRequest> | null;
    AutoQuoteRequestId: number | null;
    Carrier: Partial<Carrier> | null;
    CarrierId: number;
    CarrierName: string | null;
    Id: number;
    LineOfBusiness: LineOfBusinessString;
    Message: string | null;
    PersonalPropertyQuoteRequest: Partial<PersonalPropertyQuoteRequest> | null;
    PersonalPropertyQuoteRequestId: number | null;
}

export interface CarrierLogin {
    AgencyCode: string | null;
    Campaign: Partial<Campaign> | null;
    CampaignId: number;
    Carrier: Partial<Carrier> | null;
    CarrierId: number;
    CompanyUnits: Array<Partial<CompanyUnit>> | null;
    Id: number;
    ImageUrl: string | null;
    Username: string | null;
}

export interface CompanyUnit {
    CarrierLogin: Partial<CarrierLogin> | null;
    CarrierLoginId: number;
    CompanyUnitId: number;
    Id: number;
    IsActive: boolean;
    LineOfBusiness: LineOfBusinessString;
    State: string | null;
}

export interface Carrier {
    CarrierErrors: Array<Partial<CarrierError>> | null;
    CarrierImageAttachment: Partial<CarrierImageAttachment> | null;
    CarrierLogins: Array<Partial<CarrierLogin>> | null;
    Id: number;
    Name: string | null;
}

export enum LeavittWebRaterType {
    PersonalAuto = 0,
    PersonalProperty = 1,
    Bop = 2,
    Life = 3,
    WidgetLife = 4
}

export type LeavittWebRaterTypeString = keyof typeof LeavittWebRaterType;

export enum LineOfBusiness {
    OLD_AUTO = 0,
    HOMEOWNERS = 1,
    PERSONAL_PACKAGE = 2,
    PERSONAL_AUTO = 3
}

export type LineOfBusinessString = keyof typeof LineOfBusiness;

export interface VelocifyCampaign {
    Campaign: Partial<Campaign> | null;
    CampaignId: number;
    Id: number;
    LeavittWebRater: LeavittWebRaterTypeString;
    VelocifyCampaignId: number;
}

export interface AutoAccident {
    AutoDriver: Partial<AutoDriver> | null;
    AutoDriverId: number;
    Date: string;
    Id: number;
    Type: AutoAccidentTypeString | null;
}

export enum AutoAccidentType {
    Speeding = 0,
    DWI = 1,
    StopSign = 2,
    NotAtFaultAccident = 3,
    OtherMinorViolation = 4,
    OtherMajorViolation = 5,
    NotAtFaultOther = 6,
    AllOtherMinorInfractions = 7,
    FailureToStop = 8
}

export type AutoAccidentTypeString = keyof typeof AutoAccidentType;

export interface AutoDriver {
    AutoAccidents: Array<Partial<AutoAccident>> | null;
    AutoDriverToAutoVehicles: Array<Partial<AutoDriverToAutoVehicle>> | null;
    DateOfBirth: string;
    FirstLicensedDate: string | null;
    FirstName: string | null;
    Gender: string | null;
    HasLicense: boolean | null;
    Id: number;
    IsLicenseCurrent: boolean | null;
    LastName: string | null;
    LicenseState: string | null;
    LicenseStatus: LicenseStatusTypeString;
    MaritalStatus: MaritalStatusTypeString;
    PersonalPropertyQuoteRequest: Partial<PersonalPropertyQuoteRequest> | null;
    PersonalPropertyQuoteRequestId: number;
    RelationshipToInsured: RelationshipToInsuredTypeString;
}

export interface AutoDriverToAutoVehicle {
    AutoDriver: Partial<AutoDriver> | null;
    AutoDriverId: number;
    AutoVehicle: Partial<AutoVehicle> | null;
    AutoVehicleId: number;
    Id: number;
}

export interface AutoVehicle {
    AnnualMilesDriven: number;
    AutoDriverToAutoVehicles: Array<Partial<AutoDriverToAutoVehicle>> | null;
    CollisionDeductible: number | null;
    ComprehensiveDeductible: number | null;
    Id: number;
    Make: string | null;
    Model: string | null;
    ModelYear: number;
    PersonalPropertyQuoteRequest: Partial<PersonalPropertyQuoteRequest> | null;
    PersonalPropertyQuoteRequestId: number;
    PrimaryDriverId: number | null;
    RentalCarReimbursementLimit: number | null;
    TowingCoverageLimit: number | null;
    TransportationExpense: string | null;
    VehicleUsage: VehicleUsageTypeString;
    VIN: string | null;
}

export interface HomeOwnersCoverage {
    Description: string | null;
    HomeOwnersQuote: Partial<HomeOwnersQuote> | null;
    HomeOwnersQuoteId: number;
    Id: number;
    Premium: Partial<number>;
    Type: string | null;
    Waived: boolean;
}

export interface HomeOwnersQuote extends Quote {
    Coverages: Array<Partial<HomeOwnersCoverage>> | null;
}

export enum CoApplicantRelationshipToInsured {
    SPOUSE = 0,
    PARTNER = 1,
    CHILD = 2,
    OTHER_RELATIVE = 3,
    OTHER_NON_RELATIVE = 4,
    PARENT = 5
}

export type CoApplicantRelationshipToInsuredString = keyof typeof CoApplicantRelationshipToInsured;

export enum InitialSection {
    Home = 0,
    Auto = 1
}

export type InitialSectionString = keyof typeof InitialSection;

export enum LicenseStatusType {
    Active = 0,
    Canceled = 1,
    Revoked = 2,
    Suspended = 3
}

export type LicenseStatusTypeString = keyof typeof LicenseStatusType;

export enum MaritalStatusType {
    Single = 0,
    Married = 1,
    Separated = 2,
    Divorced = 3,
    Widowed = 4,
    DomesticPartner = 5
}

export type MaritalStatusTypeString = keyof typeof MaritalStatusType;

export enum NumberOfStories {
    One = 0,
    OnePointFive = 1,
    Two = 2,
    TwoPointFive = 3,
    Three = 4,
    ThreePointFive = 5,
    Four = 6
}

export type NumberOfStoriesString = keyof typeof NumberOfStories;

export interface PersonalAutoQuote extends Quote {
}

export interface Quote {
    Carrier: Partial<Carrier> | null;
    CarrierId: number;
    CompanyUnitId: number;
    CreatedDate: string;
    EffectiveDate: string | null;
    ExpirationDate: string | null;
    Id: number;
    PersonalPropertyQuoteRequest: Partial<PersonalPropertyQuoteRequest> | null;
    PersonalPropertyQuoteRequestId: number;
    PolicyKey: string | null;
    Premium: Partial<number> | null;
    RatedTermMonths: number;
}

export enum RelationshipToInsuredType {
    Self = 0,
    Spouse = 1,
    Parent = 2,
    Child = 3,
    Other = 4
}

export type RelationshipToInsuredTypeString = keyof typeof RelationshipToInsuredType;

export enum Section {
    HomePartial = 1,
    HomeCompleted = 2,
    AutoPartial = 4,
    AutoCompleted = 8,
    HomeAutoBundle = 10
}

export enum StartingLobType {
    Homeowners = 0,
    Auto = 1
}

export type StartingLobTypeString = keyof typeof StartingLobType;

export enum VehicleUsageType {
    Business = 0,
    Personal = 1
}

export type VehicleUsageTypeString = keyof typeof VehicleUsageType;

export enum OverallQuality {
    Standard = 0,
    High = 1,
    Premium = 2
}

export type OverallQualityString = keyof typeof OverallQuality;

export enum OccupantType {
    OWNER = 0,
    TENANT = 1
}

export type OccupantTypeString = keyof typeof OccupantType;

export enum HailResistantRoofType {
    NONE = 0,
    CLASS_1 = 1,
    CLASS_2 = 2,
    CLASS_3 = 3,
    CLASS_4 = 4
}

export type HailResistantRoofTypeString = keyof typeof HailResistantRoofType;

export enum RoofType {
    ALUMINUM_SHINGLES = 0,
    ARCHITECTURAL_SHINGLES = 1,
    ASBESTOS = 2,
    ASPHALT_SHINGLE = 3,
    CEDAR_SHAKES = 4,
    CEDAR_SHINGLES = 5,
    CLAY_TILE_OR_SLATE = 6,
    COMPOSITION_FIBERGLASS_ASPHALT_ETC = 7,
    CONCRETE_TILE = 8,
    CONCRETE_NOT_TILE = 9,
    COPPER = 10,
    FIBERGLASS = 11,
    FOAM = 12,
    GRAVEL = 13,
    METAL = 14,
    MINERAL_FIBER = 15,
    MISSION_TILE = 16,
    OTHER = 17,
    PLASTIC = 18,
    POURED = 19,
    RECYCLED_ROOFING_PRODUCTS = 20,
    ROCK = 21,
    ROLLED_ROOFING = 22,
    RUBBER_ROOF = 23,
    SLATE = 24,
    SPANISH_TILE = 25,
    CORRUGATED_STEEL = 26,
    STEEL_PORCELAIN_SHINGLES = 27,
    TAR_AND_GRAVEL = 28,
    TILE = 29,
    TIN = 30,
    WOOD_FIBER_SHINGLES = 31,
    WOOD_SHAKES = 32,
    WOOD_SHINGLES = 33,
    WOOD_SHAKE_SHINGLE = 34
}

export type RoofTypeString = keyof typeof RoofType;

export enum ConstructionType {
    FRAME = 0,
    JOISTED_MASONRY = 1,
    MASONRY = 2,
    MASONRY_VENEER = 3,
    MODIFIED_FIRE_RESISTIVE = 4,
    FIRE_RESISTIVE_SUPERIOR = 5,
    SUPERIOR_NON_COMBUSTIBLE = 6,
    STUCCO = 7,
    METAL_ALUMINUM_SIDING = 8,
    CONCRETE = 9,
    STEEL = 10,
    MOBILE_HOME = 11,
    LOG_HOME = 12
}

export type ConstructionTypeString = keyof typeof ConstructionType;

export enum LastPageVisited {
    GettingStarted2 = 0,
    HomeOwnersStep1 = 1,
    HomeOwnersStep2 = 2,
    HomeOwnersStep3 = 3,
    HomeOwnersStep4 = 4,
    HomeOwnersStep5 = 5,
    HomeOwnersStep6 = 6,
    HomeOwnersStep7 = 7,
    HomeOwnersStep8 = 8,
    HomeOwnersStep9 = 9,
    HomeOwnersStep10 = 10,
    AutoStep1 = 11,
    AutoStep2 = 12,
    AutoStep3 = 13,
    AutoStep4 = 14,
    AutoStep5 = 15,
    ChooseBundle = 16,
    Quotes = 17,
    SelectedQuote = 18
}

export type LastPageVisitedString = keyof typeof LastPageVisited;

export interface PersonalPropertyQuoteRequest extends QuoteRequest {
    AcquisitionDate: string | null;
    AutoDrivers: Array<Partial<AutoDriver>> | null;
    AutoEffectiveDate: string | null;
    AutoExpirationDate: string | null;
    AutoInjuryCoverageLimit: number | null;
    AutoLiabilityCoverageLimit: number | null;
    AutoMonthsInsured: number | null;
    AutoVehicles: Array<Partial<AutoVehicle>> | null;
    Baths: Partial<number> | null;
    CarrierErrors: Array<Partial<CarrierError>> | null;
    City: string | null;
    ClaimsLast5Years: number | null;
    CoApplicantDateOfBirth: string | null;
    CoApplicantFirstName: string | null;
    CoApplicantLastName: string | null;
    CoApplicantRelationshipToInsured: CoApplicantRelationshipToInsuredString | null;
    ConstructionType: ConstructionTypeString | null;
    CorrelationId: string | null;
    EducationLevel: EducationLevelTypeString | null;
    EffectiveDate: string | null;
    FoundationType: FoundationTypeString | null;
    FulfillErrorMessage: string | null;
    HailResistantRoofType: HailResistantRoofTypeString | null;
    HasAutomaticSprinklers: boolean | null;
    HasBurglarAlarm: boolean | null;
    HasCats: boolean | null;
    HasConsumedAlcohol: boolean | null;
    HasDeadBolts: boolean | null;
    HasDogs: boolean | null;
    HasFireAlarm: boolean | null;
    HasFireExtinguisher: boolean | null;
    HasFulfillBeenRequested: boolean;
    HasSmokeDetector: boolean | null;
    HasSwimmingPool: boolean | null;
    HasTrampoline: boolean | null;
    HomeStyle: HomeStyleString | null;
    Id: number;
    InitialSection: InitialSectionString;
    IsBundled: boolean;
    IsEnrolledInDrivingProgram: boolean | null;
    IsPaperLess: boolean | null;
    LastMajorRenovationYear: number | null;
    LastPageVisited: LastPageVisitedString;
    NumberOfBedrooms: number | null;
    NumberOfHouseholdMembers: number | null;
    NumberOfStories: NumberOfStoriesString | null;
    OccupantType: OccupantTypeString | null;
    OverallQuality: OverallQualityString | null;
    PleaseAdviseMe: boolean | null;
    PrimaryHeatType: HeatTypeString | null;
    Quotes: Array<Partial<Quote>> | null;
    RequestPayload: string | null;
    ResidenceType: ResidenceTypeString | null;
    ResponsePayload: string | null;
    RoofStyle: RoofStyleString | null;
    RoofType: RoofTypeString | null;
    SquareFootage: number | null;
    StartingLob: StartingLobTypeString;
    State: string | null;
    Street1: string | null;
    YearBuilt: number | null;
    Zip: string | null;
}

export enum HomeStyle {
    Unknown = 0,
    Ranch = 1,
    CapeCod = 2,
    Colonial = 3,
    BiLevel = 4,
    SplitLevel = 5,
    BackSplit = 6,
    Bungalow = 7,
    CondoCoOp = 8,
    Contemporary = 9,
    Cottage = 10,
    FederalColonial = 11,
    Mediterranean = 12,
    OrnateVictorian = 13,
    QueenAnne = 14,
    RaisedRanch = 15,
    Rambler = 16,
    SouthwestAdobe = 17,
    SplitFoyer = 18,
    RowHouseCenter = 19,
    RowHouseEnd = 20,
    TriLevel = 21,
    Victorian = 22,
    BiLevelRowEnd = 23,
    BiLevelRowCenter = 24,
    TriLevelRowEnd = 25,
    TriLevelRowCenter = 26
}

export type HomeStyleString = keyof typeof HomeStyle;

export enum HeatType {
    Electric = 0,
    Gas = 1,
    Wood = 2,
    Oil = 3,
    Other = 4
}

export type HeatTypeString = keyof typeof HeatType;

export enum FoundationType {
    SLAB = 0,
    CRAWL_SPACE = 1,
    BASEMENT = 2,
    PIER = 3,
    HILLSIDE = 4,
    OTHER = 5
}

export type FoundationTypeString = keyof typeof FoundationType;

export enum RoofStyle {
    Flat = 0,
    Gable = 1,
    Gambrel = 2,
    Hip = 3,
    Mansard = 4,
    Shed = 5,
    Turret = 6
}

export type RoofStyleString = keyof typeof RoofStyle;

export enum ResidenceType {
    SingleFamilyDwelling = 0,
    Condo = 1,
    Apartment = 2,
    MobileHome = 3,
    CoOp = 4,
    Townhouse = 5,
    Rowhouse = 6,
    Other = 7
}

export type ResidenceTypeString = keyof typeof ResidenceType;

export interface LifeCarrier {
    Active: boolean;
    Id: number;
    IXNId: number;
    LargeLogoUrl: string | null;
    LifeQuotes: Array<Partial<LifeQuote>> | null;
    MedLogoUrl: string | null;
    Name: string | null;
    SmallLogoUrl: string | null;
}

export interface LifeCarrierError {
    Id: number;
    LifeCarrier: Partial<LifeCarrier> | null;
    LifeCarrierId: number;
    LifeQuoteRequest: Partial<LifeQuoteRequest> | null;
    LifeQuoteRequestId: number;
}

export enum LifeQuoteRequestStatus {
    GettingStarted = 0,
    AboutYou = 1,
    MillionDollarQuote = 2,
    Uninsurable = 3,
    Error = 4,
    Quotes = 5,
    SelectedQuote = 6
}

export type LifeQuoteRequestStatusString = keyof typeof LifeQuoteRequestStatus;

export interface LifeQuoteRequest extends QuoteRequest {
    AllowTextMessaging: boolean;
    CarrierErrors: Array<Partial<LifeCarrierError>> | null;
    City: string | null;
    CoverageAmount: Partial<number>;
    ErrorMessage: string | null;
    Gender: GenderTypeString;
    HasFulfillBeenRequested: boolean;
    HealthRating: HealthRatingTypeString;
    Id: number;
    IsLargeQuoteRequest: boolean;
    LifeQuotes: Array<Partial<LifeQuote>> | null;
    MacuWealthManager: string | null;
    PartnerId: string | null;
    ProductType: ProductTypeString;
    RequestPayload: string | null;
    ResponsePayload: string | null;
    State: string | null;
    Status: LifeQuoteRequestStatusString;
    Street1: string | null;
    Tobacco: TobaccoTypeString;
    WasLargeQuoteEmailSent: boolean;
    ZipCode: string | null;
}

export interface LifeQuote {
    AnnualPremium: Partial<number>;
    Company: string | null;
    CompanyCode: string | null;
    CreatedDate: string;
    HealthCategory: string | null;
    Id: number;
    LifeCarrier: Partial<LifeCarrier> | null;
    LifeCarrierId: number | null;
    LifeQuoteRequest: Partial<LifeQuoteRequest> | null;
    LifeQuoteRequestId: number;
    LogoUrl: string | null;
    PolicyFee: Partial<number>;
    Premium: Partial<number>;
    Product: string | null;
    ProductCode: string | null;
}

export interface AutoNewPolicyDto {
    AutoEffectiveDate: string | null;
    AutoInjuryCoverageLimit: number | null;
    AutoLiabilityCoverageLimit: number | null;
}

export interface AutoPreviousPolicyDto {
    AutoExpirationDate: string | null;
    AutoMonthsInsured: number | null;
}

export interface CarrierLoginDto {
    AgencyCode: string | null;
    CampaignId: number;
    CarrierId: number;
    Id: number | null;
    Password: string | null;
    Username: string | null;
}

export interface CampaignSummaryDto {
    Attempted: number;
    CampaignId: number;
    Completed: number;
    Id: number;
    Name: string | null;
}

export interface CarrierErrorReportItem {
    CarrierId: number;
    CarrierName: string | null;
    ErrorCount: number;
}

export interface AutoQuoteRequestSummaryDto {
    CampaignSummaries: Array<Partial<CampaignSummaryDto>> | null;
    CarrierErrors: Array<Partial<CarrierErrorReportItem>> | null;
    Discounts: number;
    Drivers: number;
    Error: number;
    Policy: number;
    Quotes: number;
    RatingFailed: number;
    RatingReturnedQuote: number;
    SelectedQuote: number;
    Vehicles: number;
}

export interface IxnLifeCarrierDto {
    Id: number;
    Large: string | null;
    Medium: string | null;
    Name: string | null;
    Small: string | null;
}

export interface PersonalPropertyQuoteRequestSummaryDto {
    CampaignSummaries: Array<Partial<CampaignSummaryDto>> | null;
    CarrierErrors: Array<Partial<CarrierErrorReportItem>> | null;
    ChooseBundle: number;
    FulfillErrors: number;
    GettingStartedStep2: number;
    HomeOwnersStep1: number;
    HomeOwnersStep2: number;
    HomeOwnersStep3: number;
    HomeOwnersStep4: number;
    HomeOwnersStep5: number;
    HomeOwnersStep6: number;
    HomeOwnersStep7: number;
    HomeOwnersStep8: number;
    Quotes: number;
    RatingFailed: number;
    RatingReturnedQuote: number;
    SelectedQuote: number;
}

export interface HomeOwnersStepFiveDto {
    ClaimsLast5Years: number | null;
    LastMajorRenovationYear: number | null;
    OccupantType: OccupantTypeString | null;
}

export interface HomeOwnersStepSixDto {
    HasCats: boolean | null;
    HasDogs: boolean | null;
    HasSwimmingPool: boolean | null;
    HasTrampoline: boolean | null;
}

export interface HomeOwnersStepSevenDto {
    CoApplicantRelationshipToInsured: CoApplicantRelationshipToInsuredString | null;
}

export interface HomeOwnersStepEightDto {
    CoApplicantDateOfBirth: string | null;
    CoApplicantFirstName: string | null;
    CoApplicantLastName: string | null;
}

export interface QuestionnaireResultSummaryDto {
    AdditionalInformation: number;
    BusinessClass: number;
    CampaignSummaries: Array<Partial<CampaignSummaryDto>> | null;
    CoverageAmount: number;
    Error: number;
    GeneralInformation: number;
    Location: number;
    Quotes: number;
    RatingFailed: number;
    RatingReturnedQuote: number;
    SelectedQuote: number;
}

export interface AutoAccidentDto {
    Date: string;
    DriverId: number;
    Id: number;
    Type: AccidentTypeString | null;
    VertaforeType: VertaforeAccidentTypesString | null;
}

export interface AutoDriverDto {
    Accidents: Array<Partial<AutoAccidentDto>> | null;
    DateOfBirth: string;
    DriverToVehicles: Array<Partial<AutoDriverToVehicleDto>> | null;
    FirstLicensedDate: string | null;
    FirstName: string | null;
    Gender: string | null;
    HasLicense: boolean | null;
    Id: number | null;
    IsLicenseCurrent: boolean | null;
    LastName: string | null;
    LicenseStatus: string | null;
    MaritalStatus: string | null;
    RelationshipToInsured: string | null;
    StateLicense: string | null;
}

export interface AutoDiscountsDto {
    DoesHouseholdConsumeAlcohol: boolean | null;
    EducationLevel: EducationLevelTypeString | null;
    EnrollTelematicsProgram: boolean;
    PaperLess: boolean;
}

export interface HomeOwnersStepFourDto {
    HasAutomaticSprinklers: boolean | null;
    HasBurglarAlarm: boolean | null;
    HasDeadBolts: boolean | null;
    HasFireAlarm: boolean | null;
    HasFireExtinguisher: boolean | null;
    HasSmokeDetector: boolean | null;
}

export interface HomeOwnersStepThreeDto {
    Baths: Partial<number> | null;
    ConstructionType: ConstructionTypeString | null;
    FoundationType: FoundationTypeString | null;
    NumberOfBedrooms: number | null;
    NumberOfStories: NumberOfStoriesString | null;
    PrimaryHeatType: HeatTypeString | null;
    RoofType: RoofTypeString | null;
    SquareFootage: number | null;
    YearBuilt: number | null;
}

export interface HomeOwnersStepTwoDto {
    OverallQuality: OverallQualityString | null;
}

export interface HomeOwnersStepOneDto {
    AcquisitionDate: string;
    HomeStyle: HomeStyleString;
    ResidenceType: ResidenceTypeString;
}

export interface GettingStartedStepTwoDto {
    City: string | null;
    EmailAddress: string | null;
    PhoneNumber: string | null;
    State: string | null;
    Street1: string | null;
    Zip: string | null;
}

export interface GettingStartedStepOneDto {
    Campaign: string | null;
    CampaignId: number;
    DateOfBirth: string;
    FirstName: string | null;
    IsHome: boolean;
    LastName: string | null;
    LeadType: string | null;
    PersonalPropertyQuoteRequestId: number | null;
    RecaptchaUserResponse: string | null;
}

export interface AutoPreviousPoliciesDto {
    EffectiveDate: string | null;
    InjuryCoverageLimit: number | null;
    LiabilityCoverageLimit: number | null;
    MonthsInsured: number | null;
    PolicyExpirationDate: string | null;
}

export interface AutoVehicleDto {
    AnnualMiles: number;
    CollisionDeductible: number | null;
    ComprehensiveDeductible: number | null;
    Id: number | null;
    Make: string | null;
    Model: string | null;
    PrimaryUse: string | null;
    TowingCoverage: number | null;
    TransportationExpense: string | null;
    VIN: string | null;
    Year: number;
}

export interface AutoDriverToVehicleDto {
    DriverId: number;
    Id: number;
    VehicleId: number;
}

export interface LifeAboutYouAnswerDto {
    CoverageAmount: Partial<number>;
    Gender: GenderTypeString;
    HealthRating: HealthRatingTypeString;
    IsLargeQuoteRequest: boolean;
    ProductType: ProductTypeString;
    Tobacco: TobaccoTypeString;
}

export interface LifeAnswerDto {
    AllowTextMessaging: boolean;
    Campaign: string | null;
    CampaignId: number;
    City: string | null;
    CoverageAmount: Partial<number>;
    DateOfBirth: string;
    EmailAddress: string | null;
    FirstName: string | null;
    Gender: GenderTypeString;
    HealthRating: HealthRatingTypeString;
    HomePhoneNumber: string | null;
    IsLargeQuoteRequest: boolean;
    LastName: string | null;
    LeadType: string | null;
    LifeQuoteRequestId: number | null;
    PartnerId: string | null;
    ProductType: ProductTypeString;
    RecaptchaUserResponse: string | null;
    ReferringUrl: string | null;
    State: string | null;
    Street1: string | null;
    Tobacco: TobaccoTypeString;
    UserGuid: string | null;
    ZipCode: string | null;
}

export interface AutoGettingStartedAnswerDto {
    AgencyName: string | null;
    AllowTextMessaging: boolean;
    AutoQuoteRequestId: number | null;
    Campaign: string | null;
    City: string | null;
    DateOfBirth: string;
    EmailAddress: string | null;
    FirstName: string | null;
    HomePhoneNumber: string | null;
    LastName: string | null;
    LeadType: string | null;
    PartnerId: string | null;
    RecaptchaUserResponse: string | null;
    ReferringUrl: string | null;
    State: string | null;
    Street1: string | null;
    UserGuid: string | null;
    ZipCode: string | null;
}

export interface LifeGettingStartedAnswerDto {
    AllowTextMessaging: boolean;
    Campaign: string | null;
    CampaignId: number;
    City: string | null;
    DateOfBirth: string;
    EmailAddress: string | null;
    FirstName: string | null;
    HomePhoneNumber: string | null;
    LastName: string | null;
    LeadType: string | null;
    LifeQuoteRequestId: number | null;
    PartnerId: string | null;
    RecaptchaUserResponse: string | null;
    ReferringUrl: string | null;
    State: string | null;
    Street1: string | null;
    UserGuid: string | null;
    ZipCode: string | null;
}

export interface LifeQuoteErrorResultDto {
    DateSubmitted: string;
    ErrorMessage: string | null;
    LifeQuoteRequestId: number;
    Name: string | null;
}

export interface LifeQuoteRequestSummaryDto {
    AboutYou: number;
    CampaignSummaries: Array<Partial<CampaignSummaryDto>> | null;
    CarrierErrors: Array<Partial<CarrierErrorReportItem>> | null;
    Error: number;
    MillionDollarQuote: number;
    Quotes: number;
    RatingFailed: number;
    RatingReturnedQuote: number;
    SelectedQuote: number;
    Uninsurable: number;
}

export interface VehicleDataDto {
    ABS: string | null;
    BodyType: string | null;
    Carburetor: string | null;
    FourWheelDrive: boolean;
    FuelType: string | null;
    Maker: string | null;
    Model: string | null;
    MSRP: number;
    NumCylinders: number;
    VIN: string | null;
    Year: number;
}

export interface VertaforeLiabilityCslbiLimitDto {
    Label: string | null;
    Value: string | null;
}

export interface Attachment extends ISynchronizable {
    CdnFileName: string | null;
    DeletedDate: string | null;
    Description: string | null;
    Extension: string | null;
    IsDeleted: boolean;
    Name: string | null;
    PreviewExtension: string | null;
    PreviewSizes: string | null;
    Size: number;
}

export interface User {
    AutoQuoteRequest: Array<Partial<AutoQuoteRequest>> | null;
    CellPhoneNumber: string | null;
    DateOfBirth: string;
    EloquaContactId: number | null;
    EmailAddress: string | null;
    FirstName: string | null;
    HomePhoneNumber: string | null;
    Id: number;
    LastName: string | null;
    LegalEntityName: string | null;
    LifeQuoteRequest: Array<Partial<LifeQuoteRequest>> | null;
    PersonalPropertyQuoteRequests: Array<Partial<PersonalPropertyQuoteRequest>> | null;
    QuestionnaireResults: Array<Partial<QuestionnaireResult>> | null;
    UserGuid: string | null;
    VelocifyLeadId: number | null;
    WorkPhoneNumber: string | null;
}

export interface ISynchronizable {
    CreatedDate: string;
    LastModifiedDate: string;
}

